Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/30/18 20:21:09
masm4.asm						     Page 1 - 1


				;----------------------------------------------------------------------------------------------------
				;	FILE NAME :	MASM4.asm
				;----------------------------------------------------------------------------------------------------
				;
				;		Program Name	:	MASM4
				;		Programmer		:	Cody Thompson 
				;		Class			:	CS 3B || Asm Lang
				;		Date			:	4/26/2018
				;		Purpose			:	
				;		This program will simulate a text editor.  Text input will be allowed through the console or
				;	from a specified file.  All strings can be viewed, deleted, edited, searched and saved.
				;
				;----------------------------------------------------------------------------------------------------

					.486

					;Includes
					include ..\..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					include ..\..\Irvine\Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

					;Prototypes
					getstring				PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					ascint32 				PROTO Near32 stdcall, lpStringOfNumericChars:dword
					memoryallocBailey		PROTO NEAR32 stdcall, dSize:dword
					ExitProcess 			PROTO, dwExitCode:dword

					;Constants

					;Struct definitions
 00000010			ListNode STRUCT
 00000000  00000000		  NodeData 		DWORD 	?
 00000004  00000000		  NextPtr  		DWORD 	?
 00000008  00000000		  dPosition		DWORD	?
 0000000C  00000000		  heapHandle	HANDLE	?
				ListNode ENDS

					;Macro definitions
					
					;Data segment
 00000000				.data
 00000000 00000008 R		pListHead		DWORD		OFFSET	lListTail	
 00000004 00000008 R		pLastAddr		DWORD		OFFSET	lListTail	
 00000008 00000000		lListTail		ListNode	<0,0,0>
	   00000000
	   00000000
	   00000000
 00000018 00000000		dCount			DWORD		0
 0000001C 00000000		mHeap			HANDLE		?
					
 00000020 49 6E 70 75 74	strInputFile	BYTE		"Input.txt"
	   2E 74 78 74
 00000029 53 61 76 65 2E	strSaveFile		BYTE		"Save.txt"
	   74 78 74
 00000031 00000000		hFileHandle		HANDLE		?
 00000035 00000000		hSTDHandle		HANDLE		?	
 00000039 00000000		dBytesWritten	DWORD		0	
					
 0000003D 09 09 4D 41 53	strMenu0 		BYTE		9h, 9h, "MASM4 TEXT EDITOR", 0Ah
	   4D 34 20 54 45
	   58 54 20 45 44
	   49 54 4F 52 0A
 00000051 09 44 61 74 61	strMenuMem		BYTE		9h, "Data Structure Memory Consumption: ", 0
	   20 53 74 72 75
	   63 74 75 72 65
	   20 4D 65 6D 6F
	   72 79 20 43 6F
	   6E 73 75 6D 70
	   74 69 6F 6E 3A
	   20 00
 00000076 20 62 79 74 65	strMenuBytes	BYTE		" bytes", 0Ah
	   73 0A
 0000007D 3C 31 3E 20 56	strMenu1 		BYTE		"<1> View all strings", 0Ah, 0Ah
	   69 65 77 20 61
	   6C 6C 20 73 74
	   72 69 6E 67 73
	   0A 0A
 00000093 3C 32 3E 20 41	strMenu2 		BYTE		"<2> Add string", 0Ah
	   64 64 20 73 74
	   72 69 6E 67 0A
 000000A2 09 3C 61 3E 20	strMenu2a		BYTE		9h, "<a> from Keyboard", 0Ah
	   66 72 6F 6D 20
	   4B 65 79 62 6F
	   61 72 64 0A
 000000B5 09 3C 62 3E 20	strMenu2b		BYTE		9h, "<b> from File. Statis file named input.txt", 0Ah, 0Ah
	   66 72 6F 6D 20
	   46 69 6C 65 2E
	   20 53 74 61 74
	   69 73 20 66 69
	   6C 65 20 6E 61
	   6D 65 64 20 69
	   6E 70 75 74 2E
	   74 78 74 0A 0A
 000000E2 3C 33 3E 20 44	strMenu3 		BYTE		"<3> Delete string. Given an index #, delete the string and de-allocate memory", 0Ah, 0Ah
	   65 6C 65 74 65
	   20 73 74 72 69
	   6E 67 2E 20 47
	   69 76 65 6E 20
	   61 6E 20 69 6E
	   64 65 78 20 23
	   2C 20 64 65 6C
	   65 74 65 20 74
	   68 65 20 73 74
	   72 69 6E 67 20
	   61 6E 64 20 64
	   65 2D 61 6C 6C
	   6F 63 61 74 65
	   20 6D 65 6D 6F
	   72 79 0A 0A
 00000131 3C 34 3E 20 45	strMenu4 		BYTE		"<4> Edit string. Given an index #, replace old string w/ new string. Allocate/De-allocate as needed.", 0Ah, 0Ah
	   64 69 74 20 73
	   74 72 69 6E 67
	   2E 20 47 69 76
	   65 6E 20 61 6E
	   20 69 6E 64 65
	   78 20 23 2C 20
	   72 65 70 6C 61
	   63 65 20 6F 6C
	   64 20 73 74 72
	   69 6E 67 20 77
	   2F 20 6E 65 77
	   20 73 74 72 69
	   6E 67 2E 20 41
	   6C 6C 6F 63 61
	   74 65 2F 44 65
	   2D 61 6C 6C 6F
	   63 61 74 65 20
	   61 73 20 6E 65
	   65 64 65 64 2E
	   0A 0A
 00000197 3C 35 3E 20 53	strMenu5 		BYTE		"<5> String search. Regardless of case, return all strings that match the substring given.", 0Ah, 0Ah
	   74 72 69 6E 67
	   20 73 65 61 72
	   63 68 2E 20 52
	   65 67 61 72 64
	   6C 65 73 73 20
	   6F 66 20 63 61
	   73 65 2C 20 72
	   65 74 75 72 6E
	   20 61 6C 6C 20
	   73 74 72 69 6E
	   67 73 20 74 68
	   61 74 20 6D 61
	   74 63 68 20 74
	   68 65 20 73 75
	   62 73 74 72 69
	   6E 67 20 67 69
	   76 65 6E 2E 0A
	   0A
 000001F2 3C 36 3E 20 53	strMenu6 		BYTE		"<6> Save File", 0Ah, 0Ah
	   61 76 65 20 46
	   69 6C 65 0A 0A
 00000201 3C 37 3E 20 51	strMenu7 		BYTE		"<7> Quit", 0Ah, 0
	   75 69 74 0A 00
 0000020B 09 54 68 65 20	strListSF		BYTE		"	The List So Far...", 0Ah, 0Ah, 0
	   4C 69 73 74 20
	   53 6F 20 46 61
	   72 2E 2E 2E 0A
	   0A 00
 00000221 20 20 20 20 20	strNodeNum		BYTE		"          Item number: ", 0 
	   20 20 20 20 20
	   49 74 65 6D 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000239 20 20 20 20 20	strNodeData		BYTE		"            Node data: ", 0
	   20 20 20 20 20
	   20 20 4E 6F 64
	   65 20 64 61 74
	   61 3A 20 00
 00000251 20 20 20 20 20	strAddr			BYTE		"         This Address: ", 0
	   20 20 20 20 54
	   68 69 73 20 41
	   64 64 72 65 73
	   73 3A 20 00
 00000269 50 6C 65 61 73	strInput		BYTE		"Please enter a string to be saved in the list- ", 0Ah, 0 
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 20 74 6F 20
	   62 65 20 73 61
	   76 65 64 20 69
	   6E 20 74 68 65
	   20 6C 69 73 74
	   2D 20 0A 00
 0000029A 54 68 65 20 6C	strEmptyList	BYTE		"The list is empty.", 0Ah, 0
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 0A 00
 000002AE 50 6C 65 61 73	strIndexInput	BYTE		"Please input a node position (item #): ", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   6E 6F 64 65 20
	   70 6F 73 69 74
	   69 6F 6E 20 28
	   69 74 65 6D 20
	   23 29 3A 20 00
 000002D6 57 6F 75 6C 64	strSavePrompt	BYTE		"Would you like to append to the current data?(y/n): ", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 61 70
	   70 65 6E 64 20
	   74 6F 20 74 68
	   65 20 63 75 72
	   72 65 6E 74 20
	   64 61 74 61 3F
	   28 79 2F 6E 29
	   3A 20 00
 0000030B 50 6C 65 61 73	strSubPrompt	BYTE		"Please enter a string to be searched for- ", 0Ah, 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 20 74 6F 20
	   62 65 20 73 65
	   61 72 63 68 65
	   64 20 66 6F 72
	   2D 20 0A 00

 00000337  00000200 [		strBuffer		BYTE		512	DUP(0)
	    00
	   ]
 00000537  00000003 [		strSelection	BYTE		3 	DUP(0)
	    00
	   ]
 0000053A  00000002 [		strSelNum		BYTE		2 	DUP(0)
	    00
	   ]
 0000053C 00000000		dAllocatedBytes	DWORD 		0
 00000540 00000000		dInt			DWORD		0

					;Code segment
 00000000				.code
 00000000			main proc												;start of main ;start of program
 00000000			MENU:	
 00000000  E8 0000000E			CALL displayMenu									;display the menu
					
 00000005  E8 00000072			CALL getSelection									;get the selection input
 0000000A  EB F4			JMP MENU
					
					INVOKE ExitProcess,0								;terminate program
 00000013			main ENDP												;end of main procedure



				;---------------------------------------------------------------------------------------
 00000013			displayMenu				PROC	USES EDX
				;
				;		This procedure will display the general menu and accept input via the keyboard.
				;	The selection entered will be returned to the EAX register.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000014			MENU:	
 00000014  E8 00000000 E		CALL 	ClrScr										;clear the console screen
 00000019  BA 0000003D R		MOV		EDX,	OFFSET strMenu0						;move the offset address of strMenu0 into EDX
 0000001E  E8 00000000 E		CALL	WriteString									;write the string to the console
 00000023  A1 0000053C R		MOV		EAX, 	dAllocatedBytes						;move the value of dAllocatedBytes into EAX
 00000028  E8 00000000 E		CALL 	WriteHex									;write hex value to console 
 0000002D  BA 00000076 R		MOV		EDX, 	OFFSET strMenuBytes					;move offset address of strMenuBytes into EDX
 00000032  E8 00000000 E		CALL	WriteString									;finish menu output
					INVOKE 	getstring, addr strSelection, 2				;get the string from the console and store it into memory labeled 'strInput
 00000043  E8 00000006			CALL 	validateSelection							;validate the input selection
 00000048  3C 00			CMP		AL,		0									;compare result to 0 (false)
 0000004A  74 C8			JE		MENU										;jump to menu if AL = 0
					
					RET
 0000004E			displayMenu ENDP



				;---------------------------------------------------------------------------------------
 0000004E			validateSelection		PROC		USES	ESI	EBX	
				;
				;		This procedure will validate the input stored in strSelection to ensure it is
				;	within the menu boundaries.  1 will be returned in the AL register if the input is validate
				;	or 0 if the input is invalid.
				;	Receives: 	Nothing
				;	Returns:  	1 or 0 to the AL register
				;---------------------------------------------------------------------------------------
 00000050  BE 00000537 R		MOV 	ESI,	OFFSET	strSelection				;move the offset address of strSelection into ESI	

 00000055  8A 1E			MOV		BL,		[ESI]								;move nth index of strSelection into BL for comparison
 00000057  80 FB 31			CMP		BL,		31h									;compare to ascii value of '1'
 0000005A  7C 1B			JL 		FALSE1										;jump if BL is anything less than 31h
 0000005C  80 FB 37			CMP		BL,		37h									;compare to ascii value of '7'
 0000005F  7F 16			JG		FALSE1										;jump if bl is anything greater than 37h
					
					;if BL is equal to ascii value of '2'
				.IF		BL == 32h
 00000066  8A 5E 01			MOV		BL,		[ESI+1]								;move the next index of strSelection into BL
 00000069  80 FB 60			CMP		BL,		60h									;compare to ascii value 1 less than 'a'
 0000006C  7E 09			JLE		FALSE1										;jump if equal or anything less than 60h
 0000006E  80 FB 63			CMP		BL,		63h									;compare to ascii value 1 more than 'b'
 00000071  7D 04			JGE		FALSE1										;jump if equal or anything greater than 63h
				.ENDIF	
					
 00000073  B0 01			MOV		AL,		1									;move 1 into AL (true state)
 00000075  EB 02			JMP RETURN											;jump to return
					
 00000077			FALSE1:
 00000077  B0 00			MOV		AL,		0									;move o into AL (false state)

 00000079			RETURN:	
					RET
 0000007C			validateSelection		ENDP



				;---------------------------------------------------------------------------------------
 0000007C			getSelection			PROC		USES	ESI	EBX	EAX
				;
				;		This procedure will convert the input in strSelection to integer format and execute
				;	the appropriate procedure.  
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 0000007F  E8 00000000 E		CALL	ClrScr										;call ClrScr, clear the screen
					
 00000084  BE 00000537 R		MOV		ESI, 	OFFSET strSelection					;move the offset address of strSelection into ESI
 00000089  8A 1E			MOV		BL, 	[ESI]								;move the first element of strSelection into BL	
 0000008B  88 1D 0000053A R		MOV		strSelNum,	BL								;move BL into strSelNum
					INVOKE	ascint32,	addr strSelNum					;convert strSelNum to integer format
 0000009B  8A 5E 01			MOV		BL,		[ESI+1]								;move 2nd index of strSelection into BL
					
				.IF			EAX == 1
 000000A3  E8 0000006B			CALL 	dumpList									;call dumpList, display the entire list
 000000A8  EB 5B			JMP		RETURN
					
				.ELSEIF		EAX == 2
					;case 2a
					.IF		BL	== 61h
 000000B6  E8 000000E4			CALL	createOne									;call createOne, insert a node with input via keyboard	

					;case 2b
					.ELSE
					
					.ENDIF
					
 000000BD  EB 46			JMP		RETURN
				.ELSEIF		EAX == 3
 000000C6  E8 000001E0			CALL	deleteNode									;call deleteNode, deletes the target node and de-allocates memory
 000000CB  EB 38			JMP		RETURN
				.ELSEIF		EAX == 4
 000000D4  E8 000002BF			CALL	editTarget									;call editTarget, edits the target string and adjust memory as needed
 000000D9  EB 2A			JMP		RETURN
				.ELSEIF		EAX == 5
 000000E2  E8 0000035E			CALL	substringSearch								;call substringSearch, display all strings that match the substring
 000000E7  EB 1C			JMP		RETURN
				.ELSEIF		EAX == 6
 000000F0  E8 0000040C			CALL	saveListToFile								;call saveListToFile, writes all  ListNode strings to Save.txt (overwrites current file)
 000000F5  EB 0E			JMP		RETURN
				.ELSEIF		EAX == 7
					INVOKE ExitProcess,0		
					
				.ENDIF

 00000105			RETURN:
 00000105  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 0000010A  E8 00000000 E		CALL	WaitMsg										;wait for any key to be pressed
					RET
 00000113			getSelection 			ENDP



				;---------------------------------------------------------------------------------------
 00000113			dumpList		PROC		USES	EDX	ESI	EAX	ECX
				;
				;		This procedure will display the entire list to the console in a first-to-last order.
				;	The objects number, data and address will be displayed.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000117  8B 35 00000000 R		MOV 	ESI,	pListHead							;move the head of the list into ESI
 0000011D  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;move the position # of address ESI into ECX
 00000120  83 F9 00			CMP		ECX,	0									;ensure the list is not empty
 00000123  74 6B			JE		EMPTY										;if list is empty jump to EMPTY
					
 00000125  BA 0000020B R		MOV 	EDX,	OFFSET strListSF					;move the offset of strListSF into EDX
 0000012A  E8 00000000 E		CALL	WriteString									;write string of address EDX to console

 0000012F			WLOOP:	
 0000012F  BA 00000221 R		MOV 	EDX,	OFFSET strNodeNum					;move the offset of strNodeNum into EDX
 00000134  E8 00000000 E		CALL	WriteString									;write string of address EDX to console
 00000139  8B 46 08			MOV 	EAX,	(ListNode PTR [ESI]).dPosition		;move current nodes dPosition value into EAX
 0000013C  E8 00000000 E		CALL 	WriteDec									;write decimal of value EAX to console
 00000141  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000146  BA 00000239 R		MOV 	EDX,	OFFSET strNodeData					;move offset addresS of strNodeData into EDX
 0000014B  E8 00000000 E		CALL	WriteString									;write string of address EDX to console
 00000150  8B 16			MOV 	EDX,	(ListNode PTR [ESI]).NodeData		;move current nodes nodeData into EDX
 00000152  E8 00000000 E		CALL 	WriteString									;write string of address EDX to console
 00000157  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 0000015C  BA 00000251 R		MOV 	EDX,	OFFSET strAddr						;move the offset address of strAddr into EDX
 00000161  E8 00000000 E		CALL	WriteString									;write string of address EDX to console
 00000166  8B C6			MOV 	EAX, 	ESI									;move the value of ESI (current nodes address) into EAX
 00000168  E8 00000000 E		CALL	WriteHex									;write hex of value EAX to console

 0000016D  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000172  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000177  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 0000017C  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line

 00000181  8B 46 04			MOV		EAX,	(ListNode PTR [ESI]).NextPtr		;move the next pointer into EAX
 00000184  8B F0			MOV 	ESI,	EAX									;move the address in EAX into ESI
 00000186  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;move the next nodes position into ECX
 00000189  83 F9 00			CMP		ECX, 	0									;ensure end of list has not been reached
 0000018C  75 A1			JNE		WLOOP										;jump so long as dPosition != 0
 0000018E  EB 0A			JMP 	RETURN										;jump to return

 00000190			EMPTY:	
 00000190  BA 0000029A R		MOV		EDX,	OFFSET strEmptyList					;move offset address of strEmptyList into EDX
 00000195  E8 00000000 E		CALL	WriteString									;write string of address EDX to the console
					
 0000019A			RETURN:	
					RET
 0000019F			dumpList		ENDP


				;---------------------------------------------------------------------------------------
 0000019F			createOne		PROC		USES	EAX	ESI	ECX	EBX	
				;
				;		This procedure will allocate memory for a new listNode object and populate its
				;	attributes with proper data.  If memory can not be allocated a message will be displayed 
				;	and the procedure will return to the main driver.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
					INVOKE 	GetProcessHeap								;get the process handle
 000001A8  A3 0000001C R		MOV		mHeap, 	EAX									;move the handle into memory
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, 16		;allocate memory for a ListNode STRUCT
					
					;fail state
				.IF 		EAX == NULL
					mWrite "HeapAlloc failed"							;write fail message to console
 00000544		     1		.data		
 00000544 48 65 61 70 41     1		??0000 BYTE "HeapAlloc failed",0	
	   6C 6C 6F 63 20
	   66 61 69 6C 65
	   64 00
 000001C0		     1		.code
 000001C0  52		     1		push	edx
 000001C1  BA 00000544 R     1		mov	edx,OFFSET ??0000
 000001C6  E8 00000000 E     1		call	WriteString
 000001CB  5A		     1		pop	edx
 000001CC  EB 5B			jmp 	QUIT										;jump to quit
				.ENDIF
 000001CE  8B 0D 0000053C R		MOV		ECX,	dAllocatedBytes						;move value of dAllocatedBytes into ECX
 000001D4  83 C1 10			ADD		ECX,	16									;add 12 to current value in dAllocatedBytes
 000001D7  89 0D 0000053C R		MOV		dAllocatedBytes,		ECX					;save the new value to memory
 000001DD  FF 05 00000018 R		INC 	dCount										;move list count into ECX
 000001E3  8B 15 00000018 R		MOV 	EDX,	dCount								;move dCount into EDX
 000001E9  8B 35 00000004 R		MOV		ESI,	pLastAddr							;move the address in pLastAddr into ESI
 000001EF  8B 4E 08			MOV	 	ECX,	(ListNode PTR [ESI]).dPosition		;increment count
					
					;set pointer if list is null
				.IF ECX == 0			
 000001F6  A3 00000000 R		MOV	 	pListHead, EAX								;set list head to current address in EAX
					
					;set pointers if list has at least one element
				.ELSE
 000001FD  89 46 04			MOV		(ListNode PTR [ESI]).NextPtr, EAX			;set the last list items NextPtr equal to the address in EAX
					
				.ENDIF
 00000200  8B 1D 0000001C R		MOV		EBX,	mHeap
 00000206  89 58 0C			MOV		(ListNode PTR [EAX]).heapHandle, EBX		;move mHeap into heapHandle
 00000209  C7 40 04			MOV		(ListNode PTR [EAX]).NextPtr, OFFSET lListTail;set next pointer to NULL
	   00000008 R
 00000210  A3 00000004 R		MOV 	pLastAddr, 	EAX								;save the last address to memory
 00000215  89 50 08			MOV 	(ListNode PTR [EAX]).dPosition, EDX			;move count # into dPosition
 00000218  BA 00000269 R		MOV 	EDX,	OFFSET strInput						;move the offset address of strInput into EDX
 0000021D  E8 00000000 E		CALL	WriteString									;write the string of address EDX to the console
 00000222  E8 00000007			CALL	getStringInput								;call getString, get string data from keyboard
 00000227  89 18			MOV		(ListNode PTR [EAX]).NodeData, EBX			;move the new string address into .NodeData
					
 00000229			QUIT:
					RET
 0000022E			createOne	ENDP



				;---------------------------------------------------------------------------------------
 0000022E			getStringInput		PROC		USES	EAX	EDX	ECX ESI
				;
				;		This procedure is invoked by createOne and will display a prompt asking for an input
				;	string.  512 bytes of memory will be allocated for the string and the new string will
				;	be stored at that address.  The newly allocated memory's address will be returned in EBX.
				;	Receives:	Nothing
				;	Returns:	Newly allocated memory address in EBX register
				;---------------------------------------------------------------------------------------
					INVOKE	getString, addr strBuffer, 512				;get the string from the console
					
 00000241  BE 00000337 R		MOV		ESI,	OFFSET strBuffer
 00000246  E8 00000030			CALL	getCount									;get the number of characters in strBuffer
 0000024B  03 0D 0000053C R		ADD		ECX,	dAllocatedBytes						;add number dAllocatedBytes to number of bytes allocated
 00000251  89 0D 0000053C R		MOV		dAllocatedBytes,		ECX					;save the new value to memory
					
					INVOKE 	GetProcessHeap								;get the process heap handle
 0000025C  A3 0000001C R		MOV		mHeap, 	EAX									;move the handle into memory
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, ECX		;allocate memory on the heap
 0000026F  8B D8			MOV 	EBX,	EAX									;move the address in EAX into EBX
					
 00000271  E8 0000001E			CALL	stringCopy									;copy strBuffer into new address
					
					RET
 0000027B			getStringInput		ENDP



				;---------------------------------------------------------------------------------------
 0000027B			getCount		PROC		USES	EAX	ESI
				;
				;		This procedure will count how many characters are in the byte array addressed in ESI.
				;	All characters will be counted until a null, 0h, is reached indicating the end of the 
				;	string.
				;	Receives:	address of string to be counter in ESI
				;	Returns:	# of characters to ECX
				;---------------------------------------------------------------------------------------
 0000027D  BE 00000337 R		MOV		ESI,	OFFSET strBuffer					;move the offset address of strBuffer into ESI
 00000282  B9 00000000			MOV		ECX,	0									;clear ECX
					
 00000287			L1:
 00000287  8A 06			MOV		AL,		[ESI]								;move the nth element of [ESI] into AL
 00000289  3C 00			CMP		AL,		0									;nth element to 0
 0000028B  74 04			JE		RETURN										;jump if nth element equals 0
 0000028D  46				INC		ESI											;go to nth + 1 element
 0000028E  41				INC		ECX											;increment ECX
 0000028F  EB F6			JMP		L1											;jump to L1

 00000291			RETURN:	
					RET
 00000294			getCount		ENDP



				;---------------------------------------------------------------------------------------
 00000294			stringCopy		PROC		USES	EBX	ESI
				;
				;		This procedure copies the contents of strBuffer into a newly allocated string address.
				;	All elements will be copied until a null character, 0h, is reached.  The address is 
				;	received through the EAX register.
				;
				;	Receives:	New string address in EAX
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000296  BE 00000337 R		MOV		ESI,	OFFSET strBuffer					;move the offset address of strBuffer into ESI
					
 0000029B			L1:
 0000029B  8A 1E			MOV		BL,		[ESI]								;move the nth element of [ESI] into BL
 0000029D  80 FB 00			CMP		BL,		0									;compare nth element to 0
 000002A0  74 06			JE		RETURN										;jump if nth element equals 0
 000002A2  88 18			MOV		[EAX],	BL									;move BL into the nth element into [EAX]
 000002A4  46				INC		ESI											;go to nth + 1 element of ESI
 000002A5  40				INC		EAX											;go to nth + 1 element of EAX
 000002A6  EB F3			JMP		L1											;jump to L1
					
 000002A8			RETURN:
					RET
 000002AB			stringCopy		ENDP



				;---------------------------------------------------------------------------------------
 000002AB			deleteNode		PROC		USES	EDX	EDI	ESI	ECX	EAX	EBX	
				;
				;		This procedure will prompt for an node number (dPosition) to search for and delete.
				;	If the node is found it will be 'unlinked' from the list and its memory de-allocated. A 
				;	message will be displayed reflecting the result of the search/deletion.   
				;
				;---------------------------------------------------------------------------------------
 000002B1  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 00000555		     1		.data		
 00000555 54 68 65 20 6C     1		??0001 BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 000002BF		     1		.code
 000002BF  52		     1		push	edx
 000002C0  BA 00000555 R     1		mov	edx,OFFSET ??0001
 000002C5  E8 00000000 E     1		call	WriteString
 000002CA  5A		     1		pop	edx
 000002CB  E9 000000C1			JMP		QUIT										;jump to quit
				.ENDIF	

 000002D0  BA 000002AE R		MOV		EDX,	OFFSET strIndexInput				;move offset of strIndexInput into EDX
 000002D5  E8 00000000 E		CALL 	WriteString									;write the string of address EDX to the console
					INVOKE	getString, addr	strSelNum, 3				;get string input
					INVOKE	ascint32, addr strSelNum					;convert to 32 integer
 000002F0  E8 00000000 E		CALL	Crlf
					
 000002F5  BA 00000000			MOV 	EDX,	0
					
 000002FA  BF 00000000 R		MOV 	EDI,	OFFSET pListHead					;EDI == N - 1
 000002FF  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;EBX == N + 1
 00000302  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
					
					;check for item
 00000305			CHECKL:	
					;item not found
				.IF			ECX == 0
					mWrite	"Node not found."							;write not found message to console		
 00000568		     1		.data		
 00000568 4E 6F 64 65 20     1		??0002 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 00000309		     1		.code
 00000309  52		     1		push	edx
 0000030A  BA 00000568 R     1		mov	edx,OFFSET ??0002
 0000030F  E8 00000000 E     1		call	WriteString
 00000314  5A		     1		pop	edx
 00000315  EB 7A			JMP		QUIT										;item is not found		;jump to QUIT

					;item is found
				.ELSEIF		ECX == EAX
 0000031D  EB 0F			JMP		FOUND										;item is found			;jump to FOUND
				.ELSE	
 00000321  42				INC		EDX
 00000322  8B FE			MOV		EDI,	ESI									;EDI == N				;next loops N - 1
 00000324  8B F3			MOV		ESI,	EBX									;ESI == N + 1			;next loops N
 00000326  8B 5E 04			MOV		EBX,	(ListNode	PTR	[ESI]).NextPtr		;EBX == N + 2			;next loops N + 1
 00000329  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
 0000032C  EB D7			JMP		CHECKL
				.ENDIF	
					
					;item found;;	De-allocate memory
 0000032E			FOUND:	
					;target item is last in the list
				.IF		EBX == 0
 00000332  89 3D 00000004 R		MOV		pLastAddr,	EDI								;move the previous address into memory labeled pLastAddr
				.ENDIF
					;target item is first in the list
				.IF		EDX == 0
 0000033C  89 1D 00000000 R		MOV		pListHead,	EBX								;move the next address into memory labeled pListHead
				.ENDIF

					mWrite	"Delete successful!"						;write success message to the console 
 00000578		     1		.data		
 00000578 44 65 6C 65 74     1		??0003 BYTE "Delete successful!",0	
	   65 20 73 75 63
	   63 65 73 73 66
	   75 6C 21 00
 00000342		     1		.code
 00000342  52		     1		push	edx
 00000343  BA 00000578 R     1		mov	edx,OFFSET ??0003
 00000348  E8 00000000 E     1		call	WriteString
 0000034D  5A		     1		pop	edx
 0000034E  56				PUSH	ESI											;save contents of ESI
 0000034F  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move nodeData into EDX
 00000351  8B F2			MOV		ESI,	EDX									;move nodeData into ESI
 00000353  E8 FFFFFF23			CALL	getCount									;call getCount
 00000358  83 C1 10			ADD		ECX,	16									;add number of bytes for ListNode being deleted
 0000035B  A1 0000053C R		MOV		EAX,	dAllocatedBytes						;move dAllocatedBytes value to EAX
 00000360  2B C1			SUB		EAX,	ECX									;subtract 528 from EAX
 00000362  A3 0000053C R		MOV		dAllocatedBytes,	EAX						;move value in EAX into memory
 00000367  5E				POP		ESI
					
 00000368  8B 46 0C			MOV		EAX,	(ListNode PTR [ESI]).heapHandle		;move the heap handle into EAX
 0000036B  A3 0000001C R		MOV		mHeap,	EAX									;move heapHandle to memory for de-allocation
					INVOKE	HeapFree, mHeap, 0, ESI						;de-allocate

 0000037E  89 5F 04			MOV		(listNode	PTR	[EDI]).NextPtr,	EBX			;move the next address into (previous address).NextPtr
					
 00000381  EB 0E			JMP QUIT
					;item not found
 00000383			NOTFOUND:
					mWrite	"Node not found."							;write not found message to console
 0000058B		     1		.data		
 0000058B 4E 6F 64 65 20     1		??0004 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 00000383		     1		.code
 00000383  52		     1		push	edx
 00000384  BA 0000058B R     1		mov	edx,OFFSET ??0004
 00000389  E8 00000000 E     1		call	WriteString
 0000038E  5A		     1		pop	edx
 0000038F  EB 00			JMP		QUIT
					;immediate quit
 00000391			QUIT:
					RET
 00000398			deleteNode		ENDP



				;---------------------------------------------------------------------------------------
 00000398			editTarget		PROC		USES	EDX	EDI	ESI	EBX	ECX	EAX
				;
				;		This procedure will prompt for a list index number and search the list for the given 
				;	index.  If the index is found another prompt will be printed to the console asking for a 
				;	replacement string.  The given string will have new memory generated from the heap and 
				;	its address moved into the respective N.NodeData field of the STRUCT.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 0000039E  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 0000059B		     1		.data		
 0000059B 54 68 65 20 6C     1		??0005 BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 000003AC		     1		.code
 000003AC  52		     1		push	edx
 000003AD  BA 0000059B R     1		mov	edx,OFFSET ??0005
 000003B2  E8 00000000 E     1		call	WriteString
 000003B7  5A		     1		pop	edx
 000003B8  E9 00000081			JMP		QUIT										;jump to quit
				.ENDIF	
					
 000003BD  BA 000002AE R		MOV		EDX,	OFFSET strIndexInput				;move offset of strIndexInput into EDX
 000003C2  E8 00000000 E		CALL 	WriteString									;write the string of address EDX to the console
					INVOKE	getString, addr	strSelNum, 3				;get string input
					INVOKE	ascint32, addr strSelNum					;convert to 32 integer
 000003DD  E8 00000000 E		CALL	Crlf
					
 000003E2  BA 00000000			MOV 	EDX,	0
					
 000003E7  BF 00000000 R		MOV 	EDI,	OFFSET pListHead					;EDI == N - 1
 000003EC  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;EBX == N + 1
 000003EF  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
					
					
					;check for item
 000003F2			CHECKL:	
					;item not found
				.IF			ECX == 0
					mWrite	"Node not found."							;write not found message to console		
 000005AE		     1		.data		
 000005AE 4E 6F 64 65 20     1		??0006 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 000003F6		     1		.code
 000003F6  52		     1		push	edx
 000003F7  BA 000005AE R     1		mov	edx,OFFSET ??0006
 000003FC  E8 00000000 E     1		call	WriteString
 00000401  5A		     1		pop	edx
 00000402  EB 3A			JMP		QUIT										;item is not found		;jump to QUIT

					;item is found
				.ELSEIF		ECX == EAX
 0000040A  EB 0F			JMP		FOUND										;item is found			;jump to FOUND
				.ELSE	
 0000040E  42				INC		EDX
 0000040F  8B FE			MOV		EDI,	ESI									;EDI == N				;next loops N - 1
 00000411  8B F3			MOV		ESI,	EBX									;ESI == N + 1			;next loops N
 00000413  8B 5E 04			MOV		EBX,	(ListNode	PTR	[ESI]).NextPtr		;EBX == N + 2			;next loops N + 1
 00000416  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
 00000419  EB D7			JMP		CHECKL
				.ENDIF	
					
					;item found;;	Edit string
 0000041B			FOUND:	
					;target item is last in the list
 0000041B  E8 FFFFFE0E			CALL	getStringInput								;get the new string
 00000420  89 1E			MOV		(ListNode	PTR	[ESI]).NodeData,	EBX		;move the new string address into nodeData
					
					mWrite	"Edit successful!"							;write success message to the console 
 000005BE		     1		.data		
 000005BE 45 64 69 74 20     1		??0007 BYTE "Edit successful!",0	
	   73 75 63 63 65
	   73 73 66 75 6C
	   21 00
 00000422		     1		.code
 00000422  52		     1		push	edx
 00000423  BA 000005BE R     1		mov	edx,OFFSET ??0007
 00000428  E8 00000000 E     1		call	WriteString
 0000042D  5A		     1		pop	edx
					
 0000042E  EB 0E			JMP QUIT
					;item not found
 00000430			NOTFOUND:
					mWrite	"Node not found."							;write not found message to console
 000005CF		     1		.data		
 000005CF 4E 6F 64 65 20     1		??0008 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 00000430		     1		.code
 00000430  52		     1		push	edx
 00000431  BA 000005CF R     1		mov	edx,OFFSET ??0008
 00000436  E8 00000000 E     1		call	WriteString
 0000043B  5A		     1		pop	edx
 0000043C  EB 00			JMP		QUIT
					;immediate quit
 0000043E			QUIT:
					RET
 00000445			editTarget		ENDP



				;---------------------------------------------------------------------------------------
 00000445			substringSearch		PROC		USES	EAX	EBX	ECX	EDX	ESI EDI
				;
				;		This procedure will search all the strings in the linked list for a match to the sub 
				;	string.  If a match is found the string will be printed to the console.
				;
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 0000044B  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
					
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 000005DF		     1		.data		
 000005DF 54 68 65 20 6C     1		??0009 BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 00000459		     1		.code
 00000459  52		     1		push	edx
 0000045A  BA 000005DF R     1		mov	edx,OFFSET ??0009
 0000045F  E8 00000000 E     1		call	WriteString
 00000464  5A		     1		pop	edx
 00000465  EB 7E			JMP		QUIT										;jump to QUIT
				.ELSE
 00000469  BA 0000030B R		MOV		EDX,	OFFSET strSubPrompt					;move offset address of strSubPrompt into EDX
 0000046E  E8 00000000 E		CALL	WriteString									;write msg to the console
 00000473  E8 FFFFFDB6			CALL	getStringInput								;call getStringInput, dynamically allocate a string
 00000478  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
				.ENDIF	

 0000047D  8B C3			MOV		EAX, 	EBX									;move the address of the new string into EDI
 0000047F  B9 00000000			MOV		ECX,	0									;clear ECX
					
 00000484			START:
 00000484  8B F8			MOV		EDI,	EAX									;restore to EDI
 00000486  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move N.nodeData into EDX
 00000488			SUBSRCH:
 00000488  8A 1A			MOV		BL,		[EDX]								;move nth element of List string into BL
					
				.IF		BL == 0
					.IF	BYTE PTR [EDI] == 0	
 00000493  EB 0D			JMP		MATCH										;match was found
					.ENDIF
 00000495  EB 33			JMP		NEXT										;at the end of list string
				.ENDIF	
					
				.IF	BYTE PTR [EDI] == BL
 0000049B  42				INC		EDX											;go to the next list string element
 0000049C  47				INC		EDI											;go to the next search string element
				.ELSE
 0000049F  42				INC		EDX											;go to the next list string element
				.ENDIF	
 000004A0  EB E6			JMP 	SUBSRCH										;jump subsrch

 000004A2			MATCH:	
 000004A2  41				INC	ECX												;increment match counter
				.IF		ECX == 1
 000004A8  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
					mWrite	"Matches found: "							;display match msg
 000005F2		     1		.data		
 000005F2 4D 61 74 63 68     1		??000A BYTE "Matches found: ",0	
	   65 73 20 66 6F
	   75 6E 64 3A 20
	   00
 000004AD		     1		.code
 000004AD  52		     1		push	edx
 000004AE  BA 000005F2 R     1		mov	edx,OFFSET ??000A
 000004B3  E8 00000000 E     1		call	WriteString
 000004B8  5A		     1		pop	edx
 000004B9  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
				.ENDIF
 000004BE  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move N.nodeData into EDX
 000004C0  E8 00000000 E		CALL	WriteString									;Write the string to the console
 000004C5  E8 00000000 E		CALL	Crlf										;go to the next line
 000004CA			NEXT:
 000004CA  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;move the next node address into EBX
 000004CD  8B F3			MOV		ESI,	EBX									;move the net address into ESI
 000004CF  81 FE 00000008 R		CMP		ESI,	OFFSET lListTail					;compare EBX to 0
 000004D5  74 02			JE		RETURN										;jump if equal
 000004D7  EB AB			JMP START											;jump to start
					
 000004D9			RETURN:	
					mWrite 	"End of search."							;write ending search message to console
 00000602		     1		.data		
 00000602 45 6E 64 20 6F     1		??000B BYTE "End of search.",0	
	   66 20 73 65 61
	   72 63 68 2E 00
 000004D9		     1		.code
 000004D9  52		     1		push	edx
 000004DA  BA 00000602 R     1		mov	edx,OFFSET ??000B
 000004DF  E8 00000000 E     1		call	WriteString
 000004E4  5A		     1		pop	edx
 000004E5			QUIT:
				.IF		ECX == 0
					mWrite	"No matches were found."					;write no matches found msg to console
 00000611		     1		.data		
 00000611 4E 6F 20 6D 61     1		??000C BYTE "No matches were found.",0	
	   74 63 68 65 73
	   20 77 65 72 65
	   20 66 6F 75 6E
	   64 2E 00
 000004E9		     1		.code
 000004E9  52		     1		push	edx
 000004EA  BA 00000611 R     1		mov	edx,OFFSET ??000C
 000004EF  E8 00000000 E     1		call	WriteString
 000004F4  5A		     1		pop	edx
				.ENDIF
 000004F5  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
					
					RET
 00000501			substringSearch		ENDP



				;---------------------------------------------------------------------------------------
 00000501			saveListToFile		PROC		USES	ESI	EAX	EBX	ECX	EDX	
				;
				;		This procedure saves every string in the list into an output file named 'Save.txt'.
				;	After all items have been saved a message will output how many bytes were saved into 
				;	the file.  This procedure completely overwrites the current Save.txt and all of its
				;	contents.
				;
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000506  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
					
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 00000628		     1		.data		
 00000628 54 68 65 20 6C     1		??000D BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 00000514		     1		.code
 00000514  52		     1		push	edx
 00000515  BA 00000628 R     1		mov	edx,OFFSET ??000D
 0000051A  E8 00000000 E     1		call	WriteString
 0000051F  5A		     1		pop	edx
 00000520  E9 000000A6			JMP		QUIT										;jump to QUIT
				.ENDIF	

					INVOKE 		CreateFile,	ADDR strSaveFile, GENERIC_WRITE, DO_NOT_SHARE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0

				.IF		EAX == INVALID_HANDLE_VALUE
					mWrite "Error occured while opening file."			;write the error msg to the console
 0000063B		     1		.data		
 0000063B 45 72 72 6F 72     1		??000E BYTE "Error occured while opening file.",0	
	   20 6F 63 63 75
	   72 65 64 20 77
	   68 69 6C 65 20
	   6F 70 65 6E 69
	   6E 67 20 66 69
	   6C 65 2E 00
 00000546		     1		.code
 00000546  52		     1		push	edx
 00000547  BA 0000063B R     1		mov	edx,OFFSET ??000E
 0000054C  E8 00000000 E     1		call	WriteString
 00000551  5A		     1		pop	edx
 00000552  EB 77			JMP		QUIT
				.ELSE
					mWrite "Opened file 'Save.txt'."					;write the success msg to the console
 0000065D		     1		.data		
 0000065D 4F 70 65 6E 65     1		??000F BYTE "Opened file 'Save.txt'.",0	
	   64 20 66 69 6C
	   65 20 27 53 61
	   76 65 2E 74 78
	   74 27 2E 00
 00000556		     1		.code
 00000556  52		     1		push	edx
 00000557  BA 0000065D R     1		mov	edx,OFFSET ??000F
 0000055C  E8 00000000 E     1		call	WriteString
 00000561  5A		     1		pop	edx
 00000562  E8 00000000 E		CALL 	Crlf										;call Crlf, go to the next line
 00000567  A3 00000031 R		MOV		hFileHandle,	EAX							;move the file handle to memory
				.ENDIF

 0000056C  B8 00000000			MOV		EAX,	0									;clear EAX
 00000571  A3 00000039 R		MOV		dBytesWritten, EAX							;clear dBytesWritten
 00000576  6A 00			PUSH	0											;push 0 for the loop
 00000578			WRITE:
 00000578  83 7E 08 00			CMP		DWORD PTR (ListNode PTR [ESI]).dPosition, 0	;compare N.dPosition to 0
 0000057C  74 2E			JE		RETURN										;jump to RETURN if equal
 0000057E  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move the node data into EDX
 00000580  56				PUSH	ESI											;push ESI onto the stack
 00000581  8B F2			MOV		ESI,	EDX									;move EDX into ESI for getCount
 00000583  E8 FFFFFCF3			CALL	getCount									;call getCount, result is in ECX
 00000588  5E				POP		ESI											;restore ESI
					
					;EDX = pointer to string, ECX = # of bytes to write to file, EAX = number of bytes written after execution
					INVOKE WriteFile, hFileHandle, EDX, ECX, addr dBytesWritten, 0 
					
 0000059D  8B 5E 04			MOV		EBX, 	(ListNode PTR [ESI]).NextPtr		;move the next address into EBX
 000005A0  8B F3			MOV		ESI,	EBX									;move the next address into ESI ; ESI = n
 000005A2  5B				POP		EBX											;restore EBX   
 000005A3  03 1D 00000039 R		ADD		EBX,	dBytesWritten						;add bytes written to EBX
 000005A9  53				PUSH	EBX											;push EBX
 000005AA  EB CC			JMP		WRITE										;jump to WRITE

 000005AC			RETURN:
					;close the file referenced by the handle hFileHandle
					INVOKE 	CloseHandle, hFileHandle					
					
 000005B7  5B				POP		EBX											;restore EBX
 000005B8  8B C3			MOV		EAX, 	EBX									;move EBX into EAX for WriteDec
 000005BA  E8 00000000 E		CALL	WriteDec									;call WriteDec, display EAXs value to the console
					mWrite	" bytes were written to the file."			;display the written bytes msg to the console
 00000675		     1		.data		
 00000675 20 62 79 74 65     1		??0010 BYTE " bytes were written to the file.",0	
	   73 20 77 65 72
	   65 20 77 72 69
	   74 74 65 6E 20
	   74 6F 20 74 68
	   65 20 66 69 6C
	   65 2E 00
 000005BF		     1		.code
 000005BF  52		     1		push	edx
 000005C0  BA 00000675 R     1		mov	edx,OFFSET ??0010
 000005C5  E8 00000000 E     1		call	WriteString
 000005CA  5A		     1		pop	edx
					
 000005CB			QUIT:	
					RET
 000005D1			saveListToFile		ENDP



				;---------------------------------------------------------------------------------------

				;---------------------------------------------------------------------------------------



				;---------------------------------------------------------------------------------------

				end main												;end of main

































Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/30/18 20:21:09
masm4.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
ListNode . . . . . . . . . . . .	 00000010
  NodeData . . . . . . . . . . .	 00000000	 DWord
  NextPtr  . . . . . . . . . . .	 00000004	 DWord
  dPosition  . . . . . . . . . .	 00000008	 DWord
  heapHandle . . . . . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000696 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005D1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
createOne  . . . . . . . . . . .	P Near	 0000019F _TEXT	Length= 0000008F Public STDCALL
  QUIT . . . . . . . . . . . . .	L Near	 00000229 _TEXT	
deleteNode . . . . . . . . . . .	P Near	 000002AB _TEXT	Length= 000000ED Public STDCALL
  CHECKL . . . . . . . . . . . .	L Near	 00000305 _TEXT	
  FOUND  . . . . . . . . . . . .	L Near	 0000032E _TEXT	
  NOTFOUND . . . . . . . . . . .	L Near	 00000383 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 00000391 _TEXT	
displayMenu  . . . . . . . . . .	P Near	 00000013 _TEXT	Length= 0000003B Public STDCALL
  MENU . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
dumpList . . . . . . . . . . . .	P Near	 00000113 _TEXT	Length= 0000008C Public STDCALL
  WLOOP  . . . . . . . . . . . .	L Near	 0000012F _TEXT	
  EMPTY  . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 0000019A _TEXT	
editTarget . . . . . . . . . . .	P Near	 00000398 _TEXT	Length= 000000AD Public STDCALL
  CHECKL . . . . . . . . . . . .	L Near	 000003F2 _TEXT	
  FOUND  . . . . . . . . . . . .	L Near	 0000041B _TEXT	
  NOTFOUND . . . . . . . . . . .	L Near	 00000430 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000043E _TEXT	
getCount . . . . . . . . . . . .	P Near	 0000027B _TEXT	Length= 00000019 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000287 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000291 _TEXT	
getSelection . . . . . . . . . .	P Near	 0000007C _TEXT	Length= 00000097 Public STDCALL
  RETURN . . . . . . . . . . . .	L Near	 00000105 _TEXT	
getStringInput . . . . . . . . .	P Near	 0000022E _TEXT	Length= 0000004D Public STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000013 Public STDCALL
  MENU . . . . . . . . . . . . .	L Near	 00000000 _TEXT	
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
saveListToFile . . . . . . . . .	P Near	 00000501 _TEXT	Length= 000000D0 Public STDCALL
  WRITE  . . . . . . . . . . . .	L Near	 00000578 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000005AC _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000005CB _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stringCopy . . . . . . . . . . .	P Near	 00000294 _TEXT	Length= 00000017 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000029B _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000002A8 _TEXT	
substringSearch  . . . . . . . .	P Near	 00000445 _TEXT	Length= 000000BC Public STDCALL
  START  . . . . . . . . . . . .	L Near	 00000484 _TEXT	
  SUBSRCH  . . . . . . . . . . .	L Near	 00000488 _TEXT	
  MATCH  . . . . . . . . . . . .	L Near	 000004A2 _TEXT	
  NEXT . . . . . . . . . . . . .	L Near	 000004CA _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000004D9 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000004E5 _TEXT	
validateSelection  . . . . . . .	P Near	 0000004E _TEXT	Length= 0000002E Public STDCALL
  FALSE1 . . . . . . . . . . . .	L Near	 00000077 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000079 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000544 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000555 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000568 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000578 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000058B _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000059B _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000005AE _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000005BE _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000005CF _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000005DF _DATA	
??000A . . . . . . . . . . . . .	Byte	 000005F2 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000602 _DATA	
??000C . . . . . . . . . . . . .	Byte	 00000611 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00000628 _DATA	
??000E . . . . . . . . . . . . .	Byte	 0000063B _DATA	
??000F . . . . . . . . . . . . .	Byte	 0000065D _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00000675 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dAllocatedBytes  . . . . . . . .	DWord	 0000053C _DATA	
dBytesWritten  . . . . . . . . .	DWord	 00000039 _DATA	
dCount . . . . . . . . . . . . .	DWord	 00000018 _DATA	
dInt . . . . . . . . . . . . . .	DWord	 00000540 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hFileHandle  . . . . . . . . . .	DWord	 00000031 _DATA	
hSTDHandle . . . . . . . . . . .	DWord	 00000035 _DATA	
lListTail  . . . . . . . . . . .	ListNode  00000008 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mHeap  . . . . . . . . . . . . .	DWord	 0000001C _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
pLastAddr  . . . . . . . . . . .	DWord	 00000004 _DATA	
pListHead  . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strAddr  . . . . . . . . . . . .	Byte	 00000251 _DATA	
strBuffer  . . . . . . . . . . .	Byte	 00000337 _DATA	
strEmptyList . . . . . . . . . .	Byte	 0000029A _DATA	
strIndexInput  . . . . . . . . .	Byte	 000002AE _DATA	
strInputFile . . . . . . . . . .	Byte	 00000020 _DATA	
strInput . . . . . . . . . . . .	Byte	 00000269 _DATA	
strListSF  . . . . . . . . . . .	Byte	 0000020B _DATA	
strMenu0 . . . . . . . . . . . .	Byte	 0000003D _DATA	
strMenu1 . . . . . . . . . . . .	Byte	 0000007D _DATA	
strMenu2a  . . . . . . . . . . .	Byte	 000000A2 _DATA	
strMenu2b  . . . . . . . . . . .	Byte	 000000B5 _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 00000093 _DATA	
strMenu3 . . . . . . . . . . . .	Byte	 000000E2 _DATA	
strMenu4 . . . . . . . . . . . .	Byte	 00000131 _DATA	
strMenu5 . . . . . . . . . . . .	Byte	 00000197 _DATA	
strMenu6 . . . . . . . . . . . .	Byte	 000001F2 _DATA	
strMenu7 . . . . . . . . . . . .	Byte	 00000201 _DATA	
strMenuBytes . . . . . . . . . .	Byte	 00000076 _DATA	
strMenuMem . . . . . . . . . . .	Byte	 00000051 _DATA	
strNodeData  . . . . . . . . . .	Byte	 00000239 _DATA	
strNodeNum . . . . . . . . . . .	Byte	 00000221 _DATA	
strSaveFile  . . . . . . . . . .	Byte	 00000029 _DATA	
strSavePrompt  . . . . . . . . .	Byte	 000002D6 _DATA	
strSelNum  . . . . . . . . . . .	Byte	 0000053A _DATA	
strSelection . . . . . . . . . .	Byte	 00000537 _DATA	
strSubPrompt . . . . . . . . . .	Byte	 0000030B _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors

Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/30/18 05:15:19
masm4.asm						     Page 1 - 1


				;----------------------------------------------------------------------------------------------------
				;	FILE NAME :	MASM4.asm
				;----------------------------------------------------------------------------------------------------
				;
				;		Program Name	:	MASM4
				;		Programmer		:	Cody Thompson 
				;		Class			:	CS 3B || Asm Lang
				;		Date			:	4/26/2018
				;		Purpose			:	
				;		This program will simulate a text editor.  Text input will be allowed through the console or
				;	from a specified file.  All strings can be viewed, deleted, edited, searched and saved.
				;
				;----------------------------------------------------------------------------------------------------

					.486

					;Includes
					include ..\..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					include ..\..\Irvine\Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

					;Prototypes
					getstring				PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					ascint32 				PROTO Near32 stdcall, lpStringOfNumericChars:dword
					memoryallocBailey		PROTO NEAR32 stdcall, dSize:dword
					ExitProcess 			PROTO, dwExitCode:dword

					;Constants

					;Struct definitions
 00000010			ListNode STRUCT
 00000000  00000000		  NodeData 		DWORD 	?
 00000004  00000000		  NextPtr  		DWORD 	?
 00000008  00000000		  dPosition		DWORD	?
 0000000C  00000000		  heapHandle	HANDLE	?
				ListNode ENDS

					;Macro definitions
					
					;Data segment
 00000000				.data
 00000000 00000008 R		pListHead		DWORD		OFFSET	lListTail	
 00000004 00000008 R		pLastAddr		DWORD		OFFSET	lListTail	
 00000008 00000000		lListTail		ListNode	<0,0,0>
	   00000000
	   00000000
	   00000000
 00000018 00000000		dCount			DWORD		0
 0000001C 00000000		mHeap			HANDLE		?
					
 00000020 49 6E 70 75 74	strFileName		BYTE		"Input.txt"	
	   2E 74 78 74
 00000029 00000000		hFileHandle		HANDLE		?
 0000002D 00000000		hSTDHandle		HANDLE		?	
					
 00000031 09 09 4D 41 53	strMenu0 		BYTE		9h, 9h, "MASM4 TEXT EDITOR", 0Ah
	   4D 34 20 54 45
	   58 54 20 45 44
	   49 54 4F 52 0A
 00000045 09 44 61 74 61	strMenuMem		BYTE		9h, "Data Structure Memory Consumption: ", 0
	   20 53 74 72 75
	   63 74 75 72 65
	   20 4D 65 6D 6F
	   72 79 20 43 6F
	   6E 73 75 6D 70
	   74 69 6F 6E 3A
	   20 00
 0000006A 20 62 79 74 65	strMenuBytes	BYTE		" bytes", 0Ah
	   73 0A
 00000071 3C 31 3E 20 56	strMenu1 		BYTE		"<1> View all strings", 0Ah, 0Ah
	   69 65 77 20 61
	   6C 6C 20 73 74
	   72 69 6E 67 73
	   0A 0A
 00000087 3C 32 3E 20 41	strMenu2 		BYTE		"<2> Add string", 0Ah
	   64 64 20 73 74
	   72 69 6E 67 0A
 00000096 09 3C 61 3E 20	strMenu2a		BYTE		9h, "<a> from Keyboard", 0Ah
	   66 72 6F 6D 20
	   4B 65 79 62 6F
	   61 72 64 0A
 000000A9 09 3C 62 3E 20	strMenu2b		BYTE		9h, "<b> from File. Statis file named input.txt", 0Ah, 0Ah
	   66 72 6F 6D 20
	   46 69 6C 65 2E
	   20 53 74 61 74
	   69 73 20 66 69
	   6C 65 20 6E 61
	   6D 65 64 20 69
	   6E 70 75 74 2E
	   74 78 74 0A 0A
 000000D6 3C 33 3E 20 44	strMenu3 		BYTE		"<3> Delete string. Given an index #, delete the string and de-allocate memory", 0Ah, 0Ah
	   65 6C 65 74 65
	   20 73 74 72 69
	   6E 67 2E 20 47
	   69 76 65 6E 20
	   61 6E 20 69 6E
	   64 65 78 20 23
	   2C 20 64 65 6C
	   65 74 65 20 74
	   68 65 20 73 74
	   72 69 6E 67 20
	   61 6E 64 20 64
	   65 2D 61 6C 6C
	   6F 63 61 74 65
	   20 6D 65 6D 6F
	   72 79 0A 0A
 00000125 3C 34 3E 20 45	strMenu4 		BYTE		"<4> Edit string. Given an index #, replace old string w/ new string. Allocate/De-allocate as needed.", 0Ah, 0Ah
	   64 69 74 20 73
	   74 72 69 6E 67
	   2E 20 47 69 76
	   65 6E 20 61 6E
	   20 69 6E 64 65
	   78 20 23 2C 20
	   72 65 70 6C 61
	   63 65 20 6F 6C
	   64 20 73 74 72
	   69 6E 67 20 77
	   2F 20 6E 65 77
	   20 73 74 72 69
	   6E 67 2E 20 41
	   6C 6C 6F 63 61
	   74 65 2F 44 65
	   2D 61 6C 6C 6F
	   63 61 74 65 20
	   61 73 20 6E 65
	   65 64 65 64 2E
	   0A 0A
 0000018B 3C 35 3E 20 53	strMenu5 		BYTE		"<5> String search. Regardless of case, return all strings that match the substring given.", 0Ah, 0Ah
	   74 72 69 6E 67
	   20 73 65 61 72
	   63 68 2E 20 52
	   65 67 61 72 64
	   6C 65 73 73 20
	   6F 66 20 63 61
	   73 65 2C 20 72
	   65 74 75 72 6E
	   20 61 6C 6C 20
	   73 74 72 69 6E
	   67 73 20 74 68
	   61 74 20 6D 61
	   74 63 68 20 74
	   68 65 20 73 75
	   62 73 74 72 69
	   6E 67 20 67 69
	   76 65 6E 2E 0A
	   0A
 000001E6 3C 36 3E 20 53	strMenu6 		BYTE		"<6> Save File", 0Ah, 0Ah
	   61 76 65 20 46
	   69 6C 65 0A 0A
 000001F5 3C 37 3E 20 51	strMenu7 		BYTE		"<7> Quit", 0Ah, 0
	   75 69 74 0A 00
 000001FF 09 54 68 65 20	strListSF		BYTE		"	The List So Far...", 0Ah, 0Ah, 0
	   4C 69 73 74 20
	   53 6F 20 46 61
	   72 2E 2E 2E 0A
	   0A 00
 00000215 20 20 20 20 20	strNodeNum		BYTE		"          Item number: ", 0 
	   20 20 20 20 20
	   49 74 65 6D 20
	   6E 75 6D 62 65
	   72 3A 20 00
 0000022D 20 20 20 20 20	strNodeData		BYTE		"            Node data: ", 0
	   20 20 20 20 20
	   20 20 4E 6F 64
	   65 20 64 61 74
	   61 3A 20 00
 00000245 20 20 20 20 20	strAddr			BYTE		"         This Address: ", 0
	   20 20 20 20 54
	   68 69 73 20 41
	   64 64 72 65 73
	   73 3A 20 00
 0000025D 50 6C 65 61 73	strInput		BYTE		"Please input a string to be saved in the list- ", 0Ah, 0 
	   65 20 69 6E 70
	   75 74 20 61 20
	   73 74 72 69 6E
	   67 20 74 6F 20
	   62 65 20 73 61
	   76 65 64 20 69
	   6E 20 74 68 65
	   20 6C 69 73 74
	   2D 20 0A 00
 0000028E 54 68 65 20 6C	strEmptyList	BYTE		"The list is empty.", 0Ah, 0
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 0A 00
 000002A2 50 6C 65 61 73	strIndexInput	BYTE		"Please input a node position (item #): ", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   6E 6F 64 65 20
	   70 6F 73 69 74
	   69 6F 6E 20 28
	   69 74 65 6D 20
	   23 29 3A 20 00

 000002CA  00000003 [		strSelection	BYTE		3 DUP(0)
	    00
	   ]
 000002CD  00000002 [		strSelNum		BYTE		2 DUP(0)
	    00
	   ]
 000002CF 00000000		dAllocatedBytes	DWORD 		0
 000002D3 00000000		dInt			DWORD		0

					;Code segment
 00000000				.code
 00000000			main proc												;start of main ;start of program
 00000000			MENU:	
 00000000  E8 0000000E			CALL displayMenu									;display the menu
					
 00000005  E8 00000072			CALL getSelection									;get the selection input
 0000000A  EB F4			JMP MENU
					
					INVOKE ExitProcess,0								;terminate program
 00000013			main ENDP												;end of main procedure



				;---------------------------------------------------------------------------------------
 00000013			displayMenu				PROC	USES EDX
				;
				;		This procedure will display the general menu and accept input via the keyboard.
				;	The selection entered will be returned to the EAX register.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000014			MENU:	
 00000014  E8 00000000 E		CALL 	ClrScr										;clear the console screen
 00000019  BA 00000031 R		MOV		EDX,	OFFSET strMenu0						;move the offset address of strMenu0 into EDX
 0000001E  E8 00000000 E		CALL	WriteString									;write the string to the console
 00000023  A1 000002CF R		MOV		EAX, 	dAllocatedBytes						;move the value of dAllocatedBytes into EAX
 00000028  E8 00000000 E		CALL 	WriteHex									;write hex value to console 
 0000002D  BA 0000006A R		MOV		EDX, 	OFFSET strMenuBytes					;move offset address of strMenuBytes into EDX
 00000032  E8 00000000 E		CALL	WriteString									;finish menu output
					INVOKE 	getstring, addr strSelection, 2				;get the string from the console and store it into memory labeled 'strInput
 00000043  E8 00000006			CALL 	validateSelection							;validate the input selection
 00000048  3C 00			CMP		AL,		0									;compare result to 0 (false)
 0000004A  74 C8			JE		MENU										;jump to menu if AL = 0
					
					RET
 0000004E			displayMenu ENDP



				;---------------------------------------------------------------------------------------
 0000004E			validateSelection		PROC		USES	ESI	EBX	
				;
				;		This procedure will validate the input stored in strSelection to ensure it is
				;	within the menu boundaries.  1 will be returned in the AL register if the input is validate
				;	or 0 if the input is invalid.
				;	Receives: 	Nothing
				;	Returns:  	1 or 0 to the AL register
				;---------------------------------------------------------------------------------------
 00000050  BE 000002CA R		MOV 	ESI,	OFFSET	strSelection				;move the offset address of strSelection into ESI	

 00000055  8A 1E			MOV		BL,		[ESI]								;move nth index of strSelection into BL for comparison
 00000057  80 FB 31			CMP		BL,		31h									;compare to ascii value of '1'
 0000005A  7C 1B			JL 		FALSE1										;jump if BL is anything less than 31h
 0000005C  80 FB 37			CMP		BL,		37h									;compare to ascii value of '7'
 0000005F  7F 16			JG		FALSE1										;jump if bl is anything greater than 37h
					
					;if BL is equal to ascii value of '2'
				.IF		BL == 32h
 00000066  8A 5E 01			MOV		BL,		[ESI+1]								;move the next index of strSelection into BL
 00000069  80 FB 60			CMP		BL,		60h									;compare to ascii value 1 less than 'a'
 0000006C  7E 09			JLE		FALSE1										;jump if equal or anything less than 60h
 0000006E  80 FB 63			CMP		BL,		63h									;compare to ascii value 1 more than 'b'
 00000071  7D 04			JGE		FALSE1										;jump if equal or anything greater than 63h
				.ENDIF	
					
 00000073  B0 01			MOV		AL,		1									;move 1 into AL (true state)
 00000075  EB 02			JMP RETURN											;jump to return
					
 00000077			FALSE1:
 00000077  B0 00			MOV		AL,		0									;move o into AL (false state)

 00000079			RETURN:	
					RET
 0000007C			validateSelection		ENDP



				;---------------------------------------------------------------------------------------
 0000007C			getSelection			PROC		USES	ESI	EBX	EAX
				;
				;		This procedure will convert the input in strSelection to integer format and execute
				;	the appropriate procedure.  
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 0000007F  BE 000002CA R		MOV		ESI, 	OFFSET strSelection					;move the offset address of strSelection into ESI
 00000084  8A 1E			MOV		BL, 	[ESI]								;move the first element of strSelection into BL	
 00000086  88 1D 000002CD R		MOV		strSelNum,	BL								;move BL into strSelNum
					INVOKE	ascint32,	addr strSelNum					;convert strSelNum to integer format
 00000096  8A 5E 01			MOV		BL,		[ESI+1]								;move 2nd index of strSelection into BL
					
				.IF			EAX == 1
 0000009E  E8 00000057			CALL 	dumpList									;call dumpList, display the entire list
 000000A3  EB 51			JMP		RETURN
					
				.ELSEIF		EAX == 2
					;case 2a
					.IF		BL	== 61h
 000000B1  E8 000000DA			CALL	createOne									;call createOne, insert a node with input via keyboard	

					;case 2b
					.ELSE
					
					.ENDIF
					
 000000B8  EB 3C			JMP		RETURN
				.ELSEIF		EAX == 3
 000000C1  E8 000001A0			CALL	deleteNode
 000000C6  EB 2E			JMP		RETURN
				.ELSEIF		EAX == 4
 000000CF  E8 0000026A			CALL	editTarget
 000000D4  EB 20			JMP		RETURN
				.ELSEIF		EAX == 5

 000000DD  EB 17			JMP		RETURN
				.ELSEIF		EAX == 6

 000000E6  EB 0E			JMP		RETURN
				.ELSEIF		EAX == 7
					INVOKE ExitProcess,0		
					
				.ENDIF

 000000F6			RETURN:
					RET
 000000FA			getSelection 			ENDP



				;---------------------------------------------------------------------------------------
 000000FA			dumpList		PROC		USES	EDX	ESI	EAX	ECX
				;
				;		This procedure will display the entire list to the console in a first-to-last order.
				;	The objects number, data and address will be displayed.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 000000FE  E8 00000000 E		CALL	ClrScr										;call ClrScr, clear the screen
					
 00000103  8B 35 00000000 R		MOV 	ESI,	pListHead							;move the head of the list into ESI
 00000109  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;move the position # of address ESI into ECX
 0000010C  83 F9 00			CMP		ECX,	0									;ensure the list is not empty
 0000010F  74 6B			JE		EMPTY										;if list is empty jump to EMPTY
					
 00000111  BA 000001FF R		MOV 	EDX,	OFFSET strListSF					;move the offset of strListSF into EDX
 00000116  E8 00000000 E		CALL	WriteString									;write string of address EDX to console

 0000011B			WLOOP:	
 0000011B  BA 00000215 R		MOV 	EDX,	OFFSET strNodeNum					;move the offset of strNodeNum into EDX
 00000120  E8 00000000 E		CALL	WriteString									;write string of address EDX to console
 00000125  8B 46 08			MOV 	EAX,	(ListNode PTR [ESI]).dPosition		;move current nodes dPosition value into EAX
 00000128  E8 00000000 E		CALL 	WriteDec									;write decimal of value EAX to console
 0000012D  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000132  BA 0000022D R		MOV 	EDX,	OFFSET strNodeData					;move offset addresS of strNodeData into EDX
 00000137  E8 00000000 E		CALL	WriteString									;write string of address EDX to console
 0000013C  8B 16			MOV 	EDX,	(ListNode PTR [ESI]).NodeData		;move current nodes nodeData into EDX
 0000013E  E8 00000000 E		CALL 	WriteString									;write string of address EDX to console
 00000143  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000148  BA 00000245 R		MOV 	EDX,	OFFSET strAddr						;move the offset address of strAddr into EDX
 0000014D  E8 00000000 E		CALL	WriteString									;write string of address EDX to console
 00000152  8B C6			MOV 	EAX, 	ESI									;move the value of ESI (current nodes address) into EAX
 00000154  E8 00000000 E		CALL	WriteHex									;write hex of value EAX to console

 00000159  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 0000015E  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000163  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000168  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line

 0000016D  8B 46 04			MOV		EAX,	(ListNode PTR [ESI]).NextPtr		;move the next pointer into EAX
 00000170  8B F0			MOV 	ESI,	EAX									;move the address in EAX into ESI
 00000172  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;move the next nodes position into ECX
 00000175  83 F9 00			CMP		ECX, 	0									;ensure end of list has not been reached
 00000178  75 A1			JNE		WLOOP										;jump so long as dPosition != 0
 0000017A  EB 0A			JMP 	RETURN										;jump to return

 0000017C			EMPTY:	
 0000017C  BA 0000028E R		MOV		EDX,	OFFSET strEmptyList					;move offset address of strEmptyList into EDX
 00000181  E8 00000000 E		CALL	WriteString									;write string of address EDX to the console
					
 00000186			RETURN:	
 00000186  E8 00000000 E		CALL	WaitMsg										;wait for any key to be pressed
					
					RET
 00000190			dumpList		ENDP


				;---------------------------------------------------------------------------------------
 00000190			createOne		PROC		USES	EAX	ESI	ECX	EBX	
				;
				;		This procedure will allocate memory for a new listNode object and populate its
				;	attributes with proper data.  If memory can not be allocated a message will be displayed 
				;	and the procedure will return to the main driver.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
					INVOKE 	GetProcessHeap
 00000199  A3 0000001C R		MOV		mHeap, 	EAX
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, 16
					
					;fail state
				.IF 		EAX == NULL
					mWrite "HeapAlloc failed"							;write fail message to console
 000002D7		     1		.data		
 000002D7 48 65 61 70 41     1		??0000 BYTE "HeapAlloc failed",0	
	   6C 6C 6F 63 20
	   66 61 69 6C 65
	   64 00
 000001B1		     1		.code
 000001B1  52		     1		push	edx
 000001B2  BA 000002D7 R     1		mov	edx,OFFSET ??0000
 000001B7  E8 00000000 E     1		call	WriteString
 000001BC  5A		     1		pop	edx
 000001BD  EB 51			jmp 	QUIT										;jump to quit
				.ENDIF
 000001BF  8B 0D 000002CF R		MOV		ECX,	dAllocatedBytes						;move value of dAllocatedBytes into ECX
 000001C5  83 C1 10			ADD		ECX,	16									;add 12 to current value in dAllocatedBytes
 000001C8  89 0D 000002CF R		MOV		dAllocatedBytes,		ECX					;save the new value to memory
 000001CE  FF 05 00000018 R		INC 	dCount										;move list count into ECX
 000001D4  8B 15 00000018 R		MOV 	EDX,	dCount								;move dCount into EDX
 000001DA  8B 35 00000004 R		MOV		ESI,	pLastAddr							;move the address in pLastAddr into ESI
 000001E0  8B 4E 08			MOV	 	ECX,	(ListNode PTR [ESI]).dPosition		;increment count
					
					;set pointer if list is null
				.IF ECX == 0			
 000001E7  A3 00000000 R		MOV	 	pListHead, EAX								;set list head to current address in EAX
					
					;set pointers if list has at least one element
				.ELSE
 000001EE  89 46 04			MOV		(ListNode PTR [ESI]).NextPtr, EAX			;set the last list items NextPtr equal to the address in EAX
					
				.ENDIF
 000001F1  8B 1D 0000001C R		MOV		EBX,	mHeap
 000001F7  89 58 0C			MOV		(ListNode PTR [EAX]).heapHandle, EBX		;move mHeap into heapHandle
 000001FA  C7 40 04			MOV		(ListNode PTR [EAX]).NextPtr, OFFSET lListTail;set next pointer to NULL
	   00000008 R
 00000201  A3 00000004 R		MOV 	pLastAddr, 	EAX								;save the last address to memory
 00000206  89 50 08			MOV 	(ListNode PTR [EAX]).dPosition, EDX			;move count # into dPosition
 00000209  E8 00000007			CALL	getStringInput								;call getString, get string data from keyboard
 0000020E  89 18			MOV		(ListNode PTR [EAX]).NodeData, EBX			;move the new string address into .NodeData
					
 00000210			QUIT:
					RET
 00000215			createOne	ENDP



				;---------------------------------------------------------------------------------------
 00000215			getStringInput		PROC		USES	EAX	EDX	ECX
				;
				;		This procedure is invoked by createOne and will display a prompt asking for an input
				;	string.  512 bytes of memory will be allocated for the string and the new string will
				;	be stored at that address.  The newly allocated memory's address will be returned in EBX.
				;	Receives:	Nothing
				;	Returns:	Newly allocated memory address in EBX register
				;---------------------------------------------------------------------------------------
 00000218  E8 00000000 E		CALL	ClrScr										;call ClrScr, clear the console screen
					
					INVOKE 	GetProcessHeap
 00000222  A3 0000001C R		MOV		mHeap, 	EAX
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, 512
					
 00000239  8B 0D 000002CF R		MOV		ECX,	dAllocatedBytes						;move value of dAllocatedBytes into ECX
 0000023F  81 C1 00000200		ADD		ECX,	512									;add 512 to current value in dAllocatedBytes
 00000245  89 0D 000002CF R		MOV		dAllocatedBytes,		ECX					;save the new value to memory
 0000024B  8B D8			MOV 	EBX,	EAX									;move the address in EAX into EBX
 0000024D  BA 0000025D R		MOV 	EDX,	OFFSET strInput						;move the offset address of strInput into EDX
 00000252  E8 00000000 E		CALL	WriteString									;write the string of address EDX to the console
					
					INVOKE	getString, EBX, 512							;get the string from the console
					
					RET
 00000266			getStringInput		ENDP



				;---------------------------------------------------------------------------------------
 00000266			deleteNode		PROC		USES	EDX	EDI	ESI	ECX	EAX	EBX	
				;
				;		This procedure will prompt for an node number (dPosition) to search for and delete.
				;	If the node is found it will be 'unlinked' from the list and its memory de-allocated. A 
				;	message will be displayed reflecting the result of the search/deletion.   
				;
				;---------------------------------------------------------------------------------------
 0000026C  E8 00000000 E		CALL	ClrScr										;call ClrScr, clear the screen
					
 00000271  BA 000002A2 R		MOV		EDX,	OFFSET strIndexInput				;move offset of strIndexInput into EDX
 00000276  E8 00000000 E		CALL 	WriteString									;write the string of address EDX to the console
					INVOKE	getString, addr	strSelNum, 3				;get string input
					INVOKE	ascint32, addr strSelNum					;convert to 32 integer
 00000291  E8 00000000 E		CALL	Crlf
					
 00000296  BA 00000000			MOV 	EDX,	0
					
 0000029B  BF 00000000 R		MOV 	EDI,	OFFSET pListHead					;EDI == N - 1
 000002A0  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
 000002A6  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;EBX == N + 1
 000002A9  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
					
					
					;check for item
 000002AC			CHECKL:	
					;item not found
				.IF			ECX == 0
					mWrite	"Node not found."							;write not found message to console		
 000002E8		     1		.data		
 000002E8 4E 6F 64 65 20     1		??0001 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 000002B0		     1		.code
 000002B0  52		     1		push	edx
 000002B1  BA 000002E8 R     1		mov	edx,OFFSET ??0001
 000002B6  E8 00000000 E     1		call	WriteString
 000002BB  5A		     1		pop	edx
 000002BC  EB 6F			JMP		QUIT										;item is not found		;jump to QUIT

					;item is found
				.ELSEIF		ECX == EAX
 000002C4  EB 0F			JMP		FOUND										;item is found			;jump to FOUND
				.ELSE	
 000002C8  42				INC		EDX
 000002C9  8B FE			MOV		EDI,	ESI									;EDI == N				;next loops N - 1
 000002CB  8B F3			MOV		ESI,	EBX									;ESI == N + 1			;next loops N
 000002CD  8B 5E 04			MOV		EBX,	(ListNode	PTR	[ESI]).NextPtr		;EBX == N + 2			;next loops N + 1
 000002D0  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
 000002D3  EB D7			JMP		CHECKL
				.ENDIF	
					
					;item found;;	De-allocate memory
 000002D5			FOUND:	
					;target item is last in the list
				.IF		EBX == 0
 000002D9  89 3D 00000004 R		MOV		pLastAddr,	EDI								;move the previous address into memory labeled pLastAddr
				.ENDIF
					;target item is first in the list
				.IF		EDX == 0
 000002E3  89 1D 00000000 R		MOV		pListHead,	EBX								;move the next address into memory labeled pListHead
				.ENDIF

					mWrite	"Delete successful!"						;write success message to the console 
 000002F8		     1		.data		
 000002F8 44 65 6C 65 74     1		??0002 BYTE "Delete successful!",0	
	   65 20 73 75 63
	   63 65 73 73 66
	   75 6C 21 00
 000002E9		     1		.code
 000002E9  52		     1		push	edx
 000002EA  BA 000002F8 R     1		mov	edx,OFFSET ??0002
 000002EF  E8 00000000 E     1		call	WriteString
 000002F4  5A		     1		pop	edx

 000002F5  8B 46 0C			MOV		EAX,	(ListNode PTR [ESI]).heapHandle		;move the heap handle into EAX
 000002F8  A3 0000001C R		MOV		mHeap,	EAX									;move heapHandle to memory for de-allocation
					INVOKE	HeapFree, mHeap, 0, ESI						;de-allocate

 0000030B  89 5F 04			MOV		(listNode	PTR	[EDI]).NextPtr,	EBX			;move the next address into (previous address).NextPtr
					
 0000030E  A1 000002CF R		MOV		EAX,	dAllocatedBytes						;move dAllocatedBytes value to EAX
 00000313  2D 00000210			SUB		EAX,	528									;subtract 528 from EAX
 00000318  A3 000002CF R		MOV		dAllocatedBytes,	EAX						;move value in EAX into memory
					
 0000031D  EB 0E			JMP QUIT
					;item not found
 0000031F			NOTFOUND:
					mWrite	"Node not found."							;write not found message to console
 0000030B		     1		.data		
 0000030B 4E 6F 64 65 20     1		??0003 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 0000031F		     1		.code
 0000031F  52		     1		push	edx
 00000320  BA 0000030B R     1		mov	edx,OFFSET ??0003
 00000325  E8 00000000 E     1		call	WriteString
 0000032A  5A		     1		pop	edx
 0000032B  EB 00			JMP		QUIT
					;immediate quit
 0000032D			QUIT:
 0000032D  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000332  E8 00000000 E		CALL	WaitMsg										;call waitMsg, wait for any key to be entered
					RET
 0000033E			deleteNode		ENDP



				;---------------------------------------------------------------------------------------
 0000033E			editTarget		PROC		USES	EDX	EDI	ESI	EBX	ECX	EAX
				;
				;		This procedure will prompt for a list index number and search the list for the given 
				;	index.  If the index is found another prompt will be printed to the console asking for a 
				;	replacement string.  The given string will have new memory generated from the heap and 
				;	its address moved into the respective N.NodeData field of the STRUCT.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000344  E8 00000000 E	CALL	ClrScr
					
 00000349  BA 000002A2 R		MOV		EDX,	OFFSET strIndexInput				;move offset of strIndexInput into EDX
 0000034E  E8 00000000 E		CALL 	WriteString									;write the string of address EDX to the console
					INVOKE	getString, addr	strSelNum, 3				;get string input
					INVOKE	ascint32, addr strSelNum					;convert to 32 integer
 00000369  E8 00000000 E		CALL	Crlf
					
 0000036E  BA 00000000			MOV 	EDX,	0
					
 00000373  BF 00000000 R		MOV 	EDI,	OFFSET pListHead					;EDI == N - 1
 00000378  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
 0000037E  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;EBX == N + 1
 00000381  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
					
					
					;check for item
 00000384			CHECKL:	
					;item not found
				.IF			ECX == 0
					mWrite	"Node not found."							;write not found message to console		
 0000031B		     1		.data		
 0000031B 4E 6F 64 65 20     1		??0004 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 00000388		     1		.code
 00000388  52		     1		push	edx
 00000389  BA 0000031B R     1		mov	edx,OFFSET ??0004
 0000038E  E8 00000000 E     1		call	WriteString
 00000393  5A		     1		pop	edx
 00000394  EB 3A			JMP		QUIT										;item is not found		;jump to QUIT

					;item is found
				.ELSEIF		ECX == EAX
 0000039C  EB 0F			JMP		FOUND										;item is found			;jump to FOUND
				.ELSE	
 000003A0  42				INC		EDX
 000003A1  8B FE			MOV		EDI,	ESI									;EDI == N				;next loops N - 1
 000003A3  8B F3			MOV		ESI,	EBX									;ESI == N + 1			;next loops N
 000003A5  8B 5E 04			MOV		EBX,	(ListNode	PTR	[ESI]).NextPtr		;EBX == N + 2			;next loops N + 1
 000003A8  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
 000003AB  EB D7			JMP		CHECKL
				.ENDIF	
					
					;item found;;	Edit string
 000003AD			FOUND:	
					;target item is last in the list

					mWrite	"Edit successful!"						;write success message to the console 
 0000032B		     1		.data		
 0000032B 45 64 69 74 20     1		??0005 BYTE "Edit successful!",0	
	   73 75 63 63 65
	   73 73 66 75 6C
	   21 00
 000003AD		     1		.code
 000003AD  52		     1		push	edx
 000003AE  BA 0000032B R     1		mov	edx,OFFSET ??0005
 000003B3  E8 00000000 E     1		call	WriteString
 000003B8  5A		     1		pop	edx

 000003B9  E8 FFFFFE57			CALL	getStringInput							;get the new string
 000003BE  89 1E			MOV		(ListNode	PTR	[ESI]).NodeData,	EBX	;move the new string address into nodeData
					
 000003C0  EB 0E			JMP QUIT
					;item not found
 000003C2			NOTFOUND:
					mWrite	"Node not found."							;write not found message to console
 0000033C		     1		.data		
 0000033C 4E 6F 64 65 20     1		??0006 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 000003C2		     1		.code
 000003C2  52		     1		push	edx
 000003C3  BA 0000033C R     1		mov	edx,OFFSET ??0006
 000003C8  E8 00000000 E     1		call	WriteString
 000003CD  5A		     1		pop	edx
 000003CE  EB 00			JMP		QUIT
					;immediate quit
 000003D0			QUIT:
 000003D0  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 000003D5  E8 00000000 E		CALL	WaitMsg										;call waitMsg, wait for any key to be entered
					
					RET
 000003E1			editTarget		ENDP



				end main												;end of main

































Microsoft (R) Macro Assembler Version 14.00.23506.0	    04/30/18 05:15:19
masm4.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
ListNode . . . . . . . . . . . .	 00000010
  NodeData . . . . . . . . . . .	 00000000	 DWord
  NextPtr  . . . . . . . . . . .	 00000004	 DWord
  dPosition  . . . . . . . . . .	 00000008	 DWord
  heapHandle . . . . . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000034C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
createOne  . . . . . . . . . . .	P Near	 00000190 _TEXT	Length= 00000085 Public STDCALL
  QUIT . . . . . . . . . . . . .	L Near	 00000210 _TEXT	
deleteNode . . . . . . . . . . .	P Near	 00000266 _TEXT	Length= 000000D8 Public STDCALL
  CHECKL . . . . . . . . . . . .	L Near	 000002AC _TEXT	
  FOUND  . . . . . . . . . . . .	L Near	 000002D5 _TEXT	
  NOTFOUND . . . . . . . . . . .	L Near	 0000031F _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000032D _TEXT	
displayMenu  . . . . . . . . . .	P Near	 00000013 _TEXT	Length= 0000003B Public STDCALL
  MENU . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
dumpList . . . . . . . . . . . .	P Near	 000000FA _TEXT	Length= 00000096 Public STDCALL
  WLOOP  . . . . . . . . . . . .	L Near	 0000011B _TEXT	
  EMPTY  . . . . . . . . . . . .	L Near	 0000017C _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000186 _TEXT	
editTarget . . . . . . . . . . .	P Near	 0000033E _TEXT	Length= 000000A3 Public STDCALL
  CHECKL . . . . . . . . . . . .	L Near	 00000384 _TEXT	
  FOUND  . . . . . . . . . . . .	L Near	 000003AD _TEXT	
  NOTFOUND . . . . . . . . . . .	L Near	 000003C2 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000003D0 _TEXT	
getSelection . . . . . . . . . .	P Near	 0000007C _TEXT	Length= 0000007E Public STDCALL
  RETURN . . . . . . . . . . . .	L Near	 000000F6 _TEXT	
getStringInput . . . . . . . . .	P Near	 00000215 _TEXT	Length= 00000051 Public STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000013 Public STDCALL
  MENU . . . . . . . . . . . . .	L Near	 00000000 _TEXT	
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validateSelection  . . . . . . .	P Near	 0000004E _TEXT	Length= 0000002E Public STDCALL
  FALSE1 . . . . . . . . . . . .	L Near	 00000077 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 00000079 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000002D7 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 000002E8 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000002F8 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000030B _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000031B _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000032B _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000033C _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dAllocatedBytes  . . . . . . . .	DWord	 000002CF _DATA	
dCount . . . . . . . . . . . . .	DWord	 00000018 _DATA	
dInt . . . . . . . . . . . . . .	DWord	 000002D3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hFileHandle  . . . . . . . . . .	DWord	 00000029 _DATA	
hSTDHandle . . . . . . . . . . .	DWord	 0000002D _DATA	
lListTail  . . . . . . . . . . .	ListNode  00000008 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mHeap  . . . . . . . . . . . . .	DWord	 0000001C _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
pLastAddr  . . . . . . . . . . .	DWord	 00000004 _DATA	
pListHead  . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strAddr  . . . . . . . . . . . .	Byte	 00000245 _DATA	
strEmptyList . . . . . . . . . .	Byte	 0000028E _DATA	
strFileName  . . . . . . . . . .	Byte	 00000020 _DATA	
strIndexInput  . . . . . . . . .	Byte	 000002A2 _DATA	
strInput . . . . . . . . . . . .	Byte	 0000025D _DATA	
strListSF  . . . . . . . . . . .	Byte	 000001FF _DATA	
strMenu0 . . . . . . . . . . . .	Byte	 00000031 _DATA	
strMenu1 . . . . . . . . . . . .	Byte	 00000071 _DATA	
strMenu2a  . . . . . . . . . . .	Byte	 00000096 _DATA	
strMenu2b  . . . . . . . . . . .	Byte	 000000A9 _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 00000087 _DATA	
strMenu3 . . . . . . . . . . . .	Byte	 000000D6 _DATA	
strMenu4 . . . . . . . . . . . .	Byte	 00000125 _DATA	
strMenu5 . . . . . . . . . . . .	Byte	 0000018B _DATA	
strMenu6 . . . . . . . . . . . .	Byte	 000001E6 _DATA	
strMenu7 . . . . . . . . . . . .	Byte	 000001F5 _DATA	
strMenuBytes . . . . . . . . . .	Byte	 0000006A _DATA	
strMenuMem . . . . . . . . . . .	Byte	 00000045 _DATA	
strNodeData  . . . . . . . . . .	Byte	 0000022D _DATA	
strNodeNum . . . . . . . . . . .	Byte	 00000215 _DATA	
strSelNum  . . . . . . . . . . .	Byte	 000002CD _DATA	
strSelection . . . . . . . . . .	Byte	 000002CA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors

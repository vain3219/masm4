Microsoft (R) Macro Assembler Version 14.00.23506.0	    05/10/18 17:36:12
masm4.asm						     Page 1 - 1


				;----------------------------------------------------------------------------------------------------
				;	FILE NAME :	MASM4.asm
				;----------------------------------------------------------------------------------------------------
				;
				;		Program Name	:	MASM4
				;		Programmer		:	Cody Thompson 
				;		Class			:	CS 3B || Asm Lang
				;		Date			:	4/26/2018
				;		Purpose			:	
				;		This program will simulate a text editor.  Text input will be allowed through the console or
				;	from a specified file.  All strings can be viewed, deleted, edited, searched and saved.
				;
				;----------------------------------------------------------------------------------------------------

					.486

					;Includes
					include ..\..\Irvine\Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
					include ..\..\Irvine\Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

					;Prototypes
					getstring				PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
					ascint32 				PROTO Near32 stdcall, lpStringOfNumericChars:dword
					memoryallocBailey		PROTO NEAR32 stdcall, dSize:dword
					GetClipboardData		PROTO, something:dword
					GlobalLock				PROTO, :DWORD
					OpenClipboard			PROTO, something:dword
					GlobalSize				PROTO, something:dword
					lstrcpy					PROTO, :DWORD, :DWORD
					GlobalUnlock			PROTO, :DWORD
					CloseClipboard			PROTO
					ExitProcess 			PROTO, dwExitCode:dword

					;Constants
 = 001E8480			HEAP_START		=		2000000
 = 17D78400			HEAP_MAX		=		400000000
 = 00000200			BUFF_SIZE		=		512
					
					;Struct definitions
 00000010			ListNode STRUCT
 00000000  00000000		  NodeData 		DWORD 	?
 00000004  00000000		  NextPtr  		DWORD 	?
 00000008  00000000		  dPosition		DWORD	?
 0000000C  00000000		  heapHandle	HANDLE	?
				ListNode ENDS

					;Macro definitions
					
					;Data segment
 00000000				.data
 00000000 00000008 R		pListHead		DWORD		OFFSET	lListTail	
 00000004 00000008 R		pLastAddr		DWORD		OFFSET	lListTail	
 00000008 00000000		lListTail		ListNode	<0,0,0>
	   00000000
	   00000000
	   00000000
 00000018 00000000		dCount			DWORD		0
 0000001C 00000000		mHeap			HANDLE		?
					
 00000020 49 6E 70 75 74	strInputFile	BYTE		"Input.txt"
	   2E 74 78 74
 00000029 53 61 76 65 2E	strSaveFile		BYTE		"Save.txt"
	   74 78 74
 00000031 00000000		hFileHandle		HANDLE		?
 00000035 00000000		hSTDHandle		HANDLE		?	
 00000039 00000000		dBytesWritten	DWORD		0	
					
 0000003D 09 09 4D 41 53	strMenu0 		BYTE		9h, 9h, "MASM4 TEXT EDITOR", 0Ah
	   4D 34 20 54 45
	   58 54 20 45 44
	   49 54 4F 52 0A
 00000051 09 44 61 74 61	strMenuMem		BYTE		9h, "Data Structure Memory Consumption: ", 0
	   20 53 74 72 75
	   63 74 75 72 65
	   20 4D 65 6D 6F
	   72 79 20 43 6F
	   6E 73 75 6D 70
	   74 69 6F 6E 3A
	   20 00
 00000076 20 62 79 74 65	strMenuBytes	BYTE		" bytes", 0Ah
	   73 0A
 0000007D 3C 31 3E 20 56	strMenu1 		BYTE		"<1> View all strings", 0Ah, 0Ah
	   69 65 77 20 61
	   6C 6C 20 73 74
	   72 69 6E 67 73
	   0A 0A
 00000093 3C 32 3E 20 41	strMenu2 		BYTE		"<2> Add string", 0Ah
	   64 64 20 73 74
	   72 69 6E 67 0A
 000000A2 09 3C 61 3E 20	strMenu2a		BYTE		9h, "<a> from Keyboard", 0Ah
	   66 72 6F 6D 20
	   4B 65 79 62 6F
	   61 72 64 0A
 000000B5 09 3C 62 3E 20	strMenu2b		BYTE		9h, "<b> from File. Static file named input.txt", 0Ah
	   66 72 6F 6D 20
	   46 69 6C 65 2E
	   20 53 74 61 74
	   69 63 20 66 69
	   6C 65 20 6E 61
	   6D 65 64 20 69
	   6E 70 75 74 2E
	   74 78 74 0A
 000000E1 09 3C 63 3E 20	strMenu2c		BYTE		9h,	"<c> from the clipboard", 0Ah, 0Ah
	   66 72 6F 6D 20
	   74 68 65 20 63
	   6C 69 70 62 6F
	   61 72 64 0A 0A
 000000FA 3C 33 3E 20 44	strMenu3 		BYTE		"<3> Delete string. Given an index #, delete the string and de-allocate memory", 0Ah, 0Ah
	   65 6C 65 74 65
	   20 73 74 72 69
	   6E 67 2E 20 47
	   69 76 65 6E 20
	   61 6E 20 69 6E
	   64 65 78 20 23
	   2C 20 64 65 6C
	   65 74 65 20 74
	   68 65 20 73 74
	   72 69 6E 67 20
	   61 6E 64 20 64
	   65 2D 61 6C 6C
	   6F 63 61 74 65
	   20 6D 65 6D 6F
	   72 79 0A 0A
 00000149 3C 34 3E 20 45	strMenu4 		BYTE		"<4> Edit string. Given an index #, replace old string w/ new string. Allocate/De-allocate as needed.", 0Ah, 0Ah
	   64 69 74 20 73
	   74 72 69 6E 67
	   2E 20 47 69 76
	   65 6E 20 61 6E
	   20 69 6E 64 65
	   78 20 23 2C 20
	   72 65 70 6C 61
	   63 65 20 6F 6C
	   64 20 73 74 72
	   69 6E 67 20 77
	   2F 20 6E 65 77
	   20 73 74 72 69
	   6E 67 2E 20 41
	   6C 6C 6F 63 61
	   74 65 2F 44 65
	   2D 61 6C 6C 6F
	   63 61 74 65 20
	   61 73 20 6E 65
	   65 64 65 64 2E
	   0A 0A
 000001AF 3C 35 3E 20 53	strMenu5 		BYTE		"<5> String search. Regardless of case, return all strings that match the substring given.", 0Ah, 0Ah
	   74 72 69 6E 67
	   20 73 65 61 72
	   63 68 2E 20 52
	   65 67 61 72 64
	   6C 65 73 73 20
	   6F 66 20 63 61
	   73 65 2C 20 72
	   65 74 75 72 6E
	   20 61 6C 6C 20
	   73 74 72 69 6E
	   67 73 20 74 68
	   61 74 20 6D 61
	   74 63 68 20 74
	   68 65 20 73 75
	   62 73 74 72 69
	   6E 67 20 67 69
	   76 65 6E 2E 0A
	   0A
 0000020A 3C 36 3E 20 53	strMenu6 		BYTE		"<6> Save File", 0Ah, 0Ah
	   61 76 65 20 46
	   69 6C 65 0A 0A
 00000219 3C 37 3E 20 51	strMenu7 		BYTE		"<7> Quit", 0Ah, 0
	   75 69 74 0A 00
 00000223 09 54 68 65 20	strListSF		BYTE		"	The List So Far...", 0Ah, 0Ah, 0
	   4C 69 73 74 20
	   53 6F 20 46 61
	   72 2E 2E 2E 0A
	   0A 00
 00000239 20 20 20 20 20	strNodeNum		BYTE		"          Item number: ", 0 
	   20 20 20 20 20
	   49 74 65 6D 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000251 20 20 20 20 20	strNodeData		BYTE		"            Node data: ", 0
	   20 20 20 20 20
	   20 20 4E 6F 64
	   65 20 64 61 74
	   61 3A 20 00
 00000269 20 20 20 20 20	strAddr			BYTE		"         This Address: ", 0
	   20 20 20 20 54
	   68 69 73 20 41
	   64 64 72 65 73
	   73 3A 20 00
 00000281 50 6C 65 61 73	strInput		BYTE		"Please enter a string to be saved in the list- ", 0Ah, 0 
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 20 74 6F 20
	   62 65 20 73 61
	   76 65 64 20 69
	   6E 20 74 68 65
	   20 6C 69 73 74
	   2D 20 0A 00
 000002B2 54 68 65 20 6C	strEmptyList	BYTE		"The list is empty.", 0Ah, 0
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 0A 00
 000002C6 50 6C 65 61 73	strIndexInput	BYTE		"Please input a node position (item #): ", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   6E 6F 64 65 20
	   70 6F 73 69 74
	   69 6F 6E 20 28
	   69 74 65 6D 20
	   23 29 3A 20 00
 000002EE 57 6F 75 6C 64	strSavePrompt	BYTE		"Would you like to append to the current data?(y/n): ", 0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 61 70
	   70 65 6E 64 20
	   74 6F 20 74 68
	   65 20 63 75 72
	   72 65 6E 74 20
	   64 61 74 61 3F
	   28 79 2F 6E 29
	   3A 20 00
 00000323 50 6C 65 61 73	strSubPrompt	BYTE		"Please enter a string to be searched for- ", 0Ah, 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 20 74 6F 20
	   62 65 20 73 65
	   61 72 63 68 65
	   64 20 66 6F 72
	   2D 20 0A 00

 0000034F  00000200 [		strBuffer		BYTE		512	DUP(0)
	    00
	   ]
 0000054F  00000003 [		strSelection	BYTE		3 	DUP(0)
	    00
	   ]
 00000552  00000005 [		strSelNum		BYTE		5 	DUP(0)
	    00
	   ]
 00000557  00000005 [		strSelNum1		BYTE		5 	DUP(0)
	    00
	   ]
 0000055C  00000005 [		strSelNum2		BYTE		5 	DUP(0)
	    00
	   ]
 00000561 00000000		dAllocatedBytes	DWORD 		0
 00000565 00000000		dInt			DWORD		0

					;Code segment
 00000000				.code
 00000000			main proc												;start of main ;start of program
					INVOKE	HeapCreate, 0, HEAP_START, HEAP_MAX			;allocate new private heap
				.If	EAX == NULL
 00000015  E8 00000000 E		CALL	WriteWindowsMsg
 0000001A  EB 13			JMP		QUIT
				.ELSE
 0000001E  A3 0000001C R		MOV		mHeap,	EAX
				.ENDIF

 00000023			MENU:	
 00000023  E8 00000022			CALL 	displayMenu									;display the menu
					
 00000028  E8 00000086			CALL 	getSelection								;get the selection input
 0000002D  EB F4			JMP 	MENU
					
 0000002F			QUIT:	
					INVOKE 	HeapDestroy,	mHeap						;Destroy the private heap
				.IF eax == NULL
 0000003E  E8 00000000 E		CALL 	WriteWindowsMsg 							; show error message
				.ENDIF
					INVOKE 	ExitProcess,	0							;terminate program
 0000004A			main ENDP												;end of main procedure



				;---------------------------------------------------------------------------------------
 0000004A			displayMenu				PROC	USES EDX
				;
				;		This procedure will display the general menu and accept input via the keyboard.
				;	The selection entered will be returned to the EAX register.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 0000004B			MENU:	
 0000004B  E8 00000000 E		CALL 	ClrScr										;clear the console screen
 00000050  BA 0000003D R		MOV		EDX,	OFFSET strMenu0						;move the offset address of strMenu0 into EDX
 00000055  E8 00000000 E		CALL	WriteString									;write the string to the console
 0000005A  A1 00000561 R		MOV		EAX, 	dAllocatedBytes						;move the value of dAllocatedBytes into EAX
 0000005F  E8 00000000 E		CALL 	WriteHex									;write hex value to console 
 00000064  BA 00000076 R		MOV		EDX, 	OFFSET strMenuBytes					;move offset address of strMenuBytes into EDX
 00000069  E8 00000000 E		CALL	WriteString									;finish menu output
					INVOKE 	getstring, addr strSelection, 2				;get the string from the console and store it into memory labeled 'strInput
 0000007A  E8 00000006			CALL 	validateSelection							;validate the input selection
 0000007F  3C 00			CMP		AL,		0									;compare result to 0 (false)
 00000081  74 C8			JE		MENU										;jump to menu if AL = 0
					
					RET
 00000085			displayMenu ENDP



				;---------------------------------------------------------------------------------------
 00000085			validateSelection		PROC		USES	ESI	EBX	
				;
				;		This procedure will validate the input stored in strSelection to ensure it is
				;	within the menu boundaries.  1 will be returned in the AL register if the input is validate
				;	or 0 if the input is invalid.
				;	Receives: 	Nothing
				;	Returns:  	1 or 0 to the AL register
				;---------------------------------------------------------------------------------------
 00000087  BE 0000054F R		MOV 	ESI,	OFFSET	strSelection				;move the offset address of strSelection into ESI	

 0000008C  8A 1E			MOV		BL,		[ESI]								;move nth index of strSelection into BL for comparison
 0000008E  80 FB 31			CMP		BL,		31h									;compare to ascii value of '1'
 00000091  7C 1B			JL 		FALSE1										;jump if BL is anything less than 31h
 00000093  80 FB 37			CMP		BL,		37h									;compare to ascii value of '7'
 00000096  7F 16			JG		FALSE1										;jump if bl is anything greater than 37h
					
					;if BL is equal to ascii value of '2'
				.IF		BL == 32h
 0000009D  8A 5E 01			MOV		BL,		[ESI+1]								;move the next index of strSelection into BL
 000000A0  80 FB 60			CMP		BL,		60h									;compare to ascii value 1 less than 'a'
 000000A3  7E 09			JLE		FALSE1										;jump if equal or anything less than 60h
 000000A5  80 FB 64			CMP		BL,		64h									;compare to ascii value 1 more than 'b'
 000000A8  7D 04			JGE		FALSE1										;jump if equal or anything greater than 63h
				.ENDIF	
					
 000000AA  B0 01			MOV		AL,		1									;move 1 into AL (true state)
 000000AC  EB 02			JMP RETURN											;jump to return
					
 000000AE			FALSE1:
 000000AE  B0 00			MOV		AL,		0									;move o into AL (false state)

 000000B0			RETURN:	
					RET
 000000B3			validateSelection		ENDP



				;---------------------------------------------------------------------------------------
 000000B3			getSelection			PROC		USES	ESI	EBX	EAX
				;
				;		This procedure will convert the input in strSelection to integer format and execute
				;	the appropriate procedure.  
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 000000B6  E8 00000000 E		CALL	ClrScr										;call ClrScr, clear the screen
					
 000000BB  BE 0000054F R		MOV		ESI, 	OFFSET strSelection					;move the offset address of strSelection into ESI
 000000C0  8A 1E			MOV		BL, 	[ESI]								;move the first element of strSelection into BL	
 000000C2  88 1D 00000552 R		MOV		strSelNum,	BL								;move BL into strSelNum
					INVOKE	ascint32,	addr strSelNum					;convert strSelNum to integer format
 000000D2  8A 5E 01			MOV		BL,		[ESI+1]								;move 2nd index of strSelection into BL
					
				.IF			EAX == 1
 000000DA  E8 00000093			CALL 	dumpList									;call dumpList, display the entire list
 000000DF  E9 00000080			JMP		RETURN
					
				.ELSEIF		EAX == 2
					;case 2a
					.IF		BL	== 61h
 000000F0  E8 000000D7			CALL	createOne									;call createOne, insert a node with input via keyboard	

					;case 2b
					.ELSEIF	BL == 62h
					
					
					;case 2c
					.ELSEIF	BL == 63h
 00000103  E8 00000389			CALL	pasteClipBoard
					.ENDIF
					
 00000108  EB 5A			JMP		RETURN
				.ELSEIF		EAX == 3
 00000111  E8 000001BE			CALL	deleteNode									;call deleteNode, deletes the target node and de-allocates memory
 00000116  EB 4C			JMP		RETURN
				.ELSEIF		EAX == 4
 0000011F  E8 0000028D			CALL	editTarget									;call editTarget, edits the target string and adjust memory as needed
 00000124  EB 3E			JMP		RETURN
				.ELSEIF		EAX == 5
 0000012D  E8 000004E7			CALL	substringSearch								;call substringSearch, display all strings that match the substring
 00000132  EB 30			JMP		RETURN
				.ELSEIF		EAX == 6
 0000013B  E8 000005B9			CALL	saveListToFile								;call saveListToFile, writes all  ListNode strings to Save.txt (overwrites current file)
 00000140  EB 22			JMP		RETURN
				.ELSEIF		EAX == 7
					INVOKE 	HeapDestroy,	mHeap						;Destroy the private heap
				.IF eax == NULL
 00000158  E8 00000000 E		CALL 	WriteWindowsMsg 							; show error message
				.ENDIF
					INVOKE ExitProcess,0								;exit process
					
				.ENDIF

 00000164			RETURN:
 00000164  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000169  E8 00000000 E		CALL	WaitMsg										;wait for any key to be pressed
					RET
 00000172			getSelection 			ENDP



				;---------------------------------------------------------------------------------------
 00000172			dumpList		PROC		USES	EDX	ESI	EAX	ECX
				;
				;		This procedure will display the entire list to the console in a first-to-last order.
				;	The objects number, data and address will be displayed.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 00000176  8B 35 00000000 R		MOV 	ESI,	pListHead							;move the head of the list into ESI
 0000017C  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;move the position # of address ESI into ECX
 0000017F  83 F9 00			CMP		ECX,	0									;ensure the list is not empty
 00000182  74 39			JE		EMPTY										;if list is empty jump to EMPTY
					
 00000184  BA 00000223 R		MOV 	EDX,	OFFSET strListSF					;move the offset of strListSF into EDX
 00000189  E8 00000000 E		CALL	WriteString									;write string of address EDX to console

 0000018E			WLOOP:	
 0000018E  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 00000193  8B 46 08			MOV 	EAX,	(ListNode PTR [ESI]).dPosition		;move current nodes dPosition value into EAX
 00000196  E8 00000000 E		CALL 	WriteDec									;write decimal of value EAX to console
					mWrite	" "											;
 00000569		     1		.data		
 00000569 20 00		     1		??0000 BYTE " ",0	
 0000019B		     1		.code
 0000019B  52		     1		push	edx
 0000019C  BA 00000569 R     1		mov	edx,OFFSET ??0000
 000001A1  E8 00000000 E     1		call	WriteString
 000001A6  5A		     1		pop	edx
 000001A7  8B 16			MOV 	EDX,	(ListNode PTR [ESI]).NodeData		;move current nodes nodeData into EDX
 000001A9  E8 00000000 E		CALL 	WriteString									;write string of address EDX to
					
 000001AE  8B 46 04			MOV		EAX,	(ListNode PTR [ESI]).NextPtr		;move the next pointer into EAX
 000001B1  8B F0			MOV 	ESI,	EAX									;move the address in EAX into ESI
 000001B3  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;move the next nodes position into ECX
 000001B6  83 F9 00			CMP		ECX, 	0									;ensure end of list has not been reached
 000001B9  75 D3			JNE		WLOOP										;jump so long as dPosition != 0
 000001BB  EB 0A			JMP 	RETURN										;jump to return

 000001BD			EMPTY:	
 000001BD  BA 000002B2 R		MOV		EDX,	OFFSET strEmptyList					;move offset address of strEmptyList into EDX
 000001C2  E8 00000000 E		CALL	WriteString									;write string of address EDX to the console
					
 000001C7			RETURN:	
					RET
 000001CC			dumpList		ENDP


				;---------------------------------------------------------------------------------------
 000001CC			createOne		PROC		USES	EAX	ESI	ECX	EBX	
				;
				;		This procedure will allocate memory for a new listNode object and populate its
				;	attributes with proper data.  If memory can not be allocated a message will be displayed 
				;	and the procedure will return to the main driver.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 000001D0			START:
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, 16		;allocate memory for a ListNode STRUCT
					
					;fail state
				.IF 		EAX == NULL
					mWrite "HeapAlloc failed"							;write fail message to console
 0000056B		     1		.data		
 0000056B 48 65 61 70 41     1		??0001 BYTE "HeapAlloc failed",0	
	   6C 6C 6F 63 20
	   66 61 69 6C 65
	   64 00
 000001E3		     1		.code
 000001E3  52		     1		push	edx
 000001E4  BA 0000056B R     1		mov	edx,OFFSET ??0001
 000001E9  E8 00000000 E     1		call	WriteString
 000001EE  5A		     1		pop	edx
 000001EF  EB 6E			jmp 	QUIT										;jump to quit
				.ENDIF
 000001F1  8B 0D 00000561 R		MOV		ECX,	dAllocatedBytes						;move value of dAllocatedBytes into ECX
 000001F7  83 C1 10			ADD		ECX,	16									;add 12 to current value in dAllocatedBytes
 000001FA  89 0D 00000561 R		MOV		dAllocatedBytes,		ECX					;save the new value to memory
 00000200  FF 05 00000018 R		INC 	dCount										;move list count into ECX
 00000206  8B 15 00000018 R		MOV 	EDX,	dCount								;move dCount into EDX
 0000020C  8B 35 00000004 R		MOV		ESI,	pLastAddr							;move the address in pLastAddr into ESI
 00000212  8B 4E 08			MOV	 	ECX,	(ListNode PTR [ESI]).dPosition		;increment count
					
					;set pointer if list is null
				.IF ECX == 0			
 00000219  A3 00000000 R		MOV	 	pListHead, EAX								;set list head to current address in EAX
					
					;set pointers if list has at least one element
				.ELSE
 00000220  89 46 04			MOV		(ListNode PTR [ESI]).NextPtr, EAX			;set the last list items NextPtr equal to the address in EAX
					
				.ENDIF
 00000223  8B 1D 0000001C R		MOV		EBX,	mHeap
 00000229  89 58 0C			MOV		(ListNode PTR [EAX]).heapHandle, EBX		;move mHeap into heapHandle
 0000022C  C7 40 04			MOV		(ListNode PTR [EAX]).NextPtr, OFFSET lListTail;set next pointer to NULL
	   00000008 R
 00000233  A3 00000004 R		MOV 	pLastAddr, 	EAX								;save the last address to memory
 00000238  89 50 08			MOV 	(ListNode PTR [EAX]).dPosition, EDX			;move count # into dPosition
 0000023B  BA 00000281 R		MOV 	EDX,	OFFSET strInput						;move the offset address of strInput into EDX
 00000240  E8 00000000 E		CALL	WriteString									;write the string of address EDX to the console
 00000245  E8 0000001A			CALL	getStringInput								;call getString, get string data from keyboard
 0000024A  8B F3			MOV		ESI,	EBX
 0000024C  E8 0000004A			CALL	getCount
 00000251  03 0D 00000561 R		ADD		ECX,	dAllocatedBytes
 00000257  89 0D 00000561 R		MOV		dAllocatedBytes,	ECX
 0000025D  89 18			MOV		(ListNode PTR [EAX]).NodeData, EBX			;move the new string address into .NodeData

 0000025F			QUIT:
					RET
 00000264			createOne	ENDP



				;---------------------------------------------------------------------------------------
 00000264			getStringInput		PROC		USES	EAX	EDX	ECX ESI
				;
				;		This procedure is invoked by createOne and will display a prompt asking for an input
				;	string.  512 bytes of memory will be allocated for the string and the new string will
				;	be stored at that address.  The newly allocated memory's address will be returned in EBX.
				;	Receives:	Nothing
				;	Returns:	Newly allocated memory address in EBX register
				;---------------------------------------------------------------------------------------
					INVOKE	getString, addr strBuffer, 512				;get the string from the console
					
 00000277  BE 0000034F R		MOV		ESI,	OFFSET strBuffer
 0000027C  E8 0000001A			CALL	getCount									;get the number of characters in strBuffer
					
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, ECX		;allocate memory on the heap
 0000028F  8B D8			MOV 	EBX,	EAX									;move the address in EAX into EBX
					
 00000291  E8 00000019			CALL	stringCopy									;copy strBuffer into new address
					
					RET
 0000029B			getStringInput		ENDP



				;---------------------------------------------------------------------------------------
 0000029B			getCount		PROC		USES	EAX	ESI
				;
				;		This procedure will count how many characters are in the byte array addressed in ESI.
				;	All characters will be counted until a null, 0h, is reached indicating the end of the 
				;	string.
				;	Receives:	address of string to be counter in ESI
				;	Returns:	# of characters to ECX
				;---------------------------------------------------------------------------------------
 0000029D  B9 00000000			MOV		ECX,	0									;clear ECX
					
 000002A2			L1:
 000002A2  8A 06			MOV		AL,		[ESI]								;move the nth element of [ESI] into AL
 000002A4  3C 00			CMP		AL,		0									;nth element to 0
 000002A6  74 04			JE		RETURN										;jump if nth element equals 0
 000002A8  46				INC		ESI											;go to nth + 1 element
 000002A9  41				INC		ECX											;increment ECX
 000002AA  EB F6			JMP		L1											;jump to L1
 000002AC			RETURN:	
					RET
 000002AF			getCount		ENDP



				;---------------------------------------------------------------------------------------
 000002AF			stringCopy		PROC		USES	EBX	ESI
				;
				;		This procedure copies the contents of strBuffer into a newly allocated string address.
				;	All elements will be copied until a null character, 0h, is reached.  The address is 
				;	received through the EAX register.
				;
				;	Receives:	New string address in EAX
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 000002B1  BE 0000034F R		MOV		ESI,	OFFSET strBuffer					;move the offset address of strBuffer into ESI
					
 000002B6			L1:
 000002B6  8A 1E			MOV		BL,		[ESI]								;move the nth element of [ESI] into BL
 000002B8  80 FB 00			CMP		BL,		0									;compare nth element to 0
 000002BB  74 06			JE		RETURN										;jump if nth element equals 0
 000002BD  88 18			MOV		[EAX],	BL									;move BL into the nth element into [EAX]
 000002BF  46				INC		ESI											;go to nth + 1 element of ESI
 000002C0  40				INC		EAX											;go to nth + 1 element of EAX
 000002C1  EB F3			JMP		L1											;jump to L1
					
 000002C3			RETURN:
					;add CRLF and null characters
 000002C3  B3 0D			MOV		BL,		13									;move CR into BL
 000002C5  88 18			MOV		[EAX],		BL								;move BL into [EAX]
 000002C7  B3 0A			MOV		BL,		0Ah									;move LF into BL
 000002C9  88 58 01			MOV		[EAX + 1],	BL								;move BL into [EAX+1]
 000002CC  B3 00			MOV		BL,		0									;move null into BL
 000002CE  88 58 02			MOV		[EAX + 2], 	BL								;move BL into [EAX+2]
					RET
 000002D4			stringCopy		ENDP



				;---------------------------------------------------------------------------------------
 000002D4			deleteNode		PROC		USES	EDX	EDI	ESI	ECX	EAX	EBX	
				;
				;		This procedure will prompt for an node number (dPosition) to search for and delete.
				;	If the node is found it will be 'unlinked' from the list and its memory de-allocated. A 
				;	message will be displayed reflecting the result of the search/deletion.   
				;
				;---------------------------------------------------------------------------------------
 000002DA  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 0000057C		     1		.data		
 0000057C 54 68 65 20 6C     1		??0002 BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 000002E8		     1		.code
 000002E8  52		     1		push	edx
 000002E9  BA 0000057C R     1		mov	edx,OFFSET ??0002
 000002EE  E8 00000000 E     1		call	WriteString
 000002F3  5A		     1		pop	edx
 000002F4  E9 000000B1			JMP		QUIT										;jump to quit
				.ENDIF	

 000002F9  BA 000002C6 R		MOV		EDX,	OFFSET strIndexInput				;move offset of strIndexInput into EDX
 000002FE  E8 00000000 E		CALL 	WriteString									;write the string of address EDX to the console
					INVOKE	getString, addr	strSelNum1, 4				;get string input
					INVOKE	ascint32, addr strSelNum1					;convert to 32 integer
 00000319  E8 00000000 E		CALL	Crlf
					
 0000031E  BA 00000000			MOV 	EDX,	0
					
 00000323  BF 00000000 R		MOV 	EDI,	OFFSET pListHead					;EDI == N - 1
 00000328  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;EBX == N + 1
 0000032B  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
					
					;check for item
 0000032E			CHECKL:	
					;item not found
				.IF			ECX == 0
					mWrite	"Node not found."							;write not found message to console		
 0000058F		     1		.data		
 0000058F 4E 6F 64 65 20     1		??0003 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 00000332		     1		.code
 00000332  52		     1		push	edx
 00000333  BA 0000058F R     1		mov	edx,OFFSET ??0003
 00000338  E8 00000000 E     1		call	WriteString
 0000033D  5A		     1		pop	edx
 0000033E  EB 6A			JMP		QUIT										;item is not found		;jump to QUIT

					;item is found
				.ELSEIF		ECX == EAX
 00000346  EB 0F			JMP		FOUND										;item is found			;jump to FOUND
				.ELSE	
 0000034A  42				INC		EDX
 0000034B  8B FE			MOV		EDI,	ESI									;EDI == N				;next loops N - 1
 0000034D  8B F3			MOV		ESI,	EBX									;ESI == N + 1			;next loops N
 0000034F  8B 5E 04			MOV		EBX,	(ListNode	PTR	[ESI]).NextPtr		;EBX == N + 2			;next loops N + 1
 00000352  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
 00000355  EB D7			JMP		CHECKL
				.ENDIF	
					
					;item found;;	De-allocate memory
 00000357			FOUND:	
					;target item is last in the list
				.IF		EBX == 0
 0000035B  89 3D 00000004 R		MOV		pLastAddr,	EDI								;move the previous address into memory labeled pLastAddr
				.ENDIF
					;target item is first in the list
				.IF		EDX == 0
 00000365  89 1D 00000000 R		MOV		pListHead,	EBX								;move the next address into memory labeled pListHead
				.ENDIF

					mWrite	"Delete successful!"						;write success message to the console 
 0000059F		     1		.data		
 0000059F 44 65 6C 65 74     1		??0004 BYTE "Delete successful!",0	
	   65 20 73 75 63
	   63 65 73 73 66
	   75 6C 21 00
 0000036B		     1		.code
 0000036B  52		     1		push	edx
 0000036C  BA 0000059F R     1		mov	edx,OFFSET ??0004
 00000371  E8 00000000 E     1		call	WriteString
 00000376  5A		     1		pop	edx
 00000377  56				PUSH	ESI											;save contents of ESI
 00000378  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move nodeData into EDX
 0000037A  8B F2			MOV		ESI,	EDX									;move nodeData into ESI
 0000037C  E8 FFFFFF1A			CALL	getCount									;call getCount
 00000381  83 C1 10			ADD		ECX,	16									;add number of bytes for ListNode being deleted
 00000384  29 0D 00000561 R		SUB		dAllocatedBytes, ECX						;move dAllocatedBytes value to EAX
 0000038A  5E				POP		ESI
					
 0000038B  8B 46 0C			MOV		EAX,	(ListNode PTR [ESI]).heapHandle		;move the heap handle into EAX
					INVOKE	HeapFree, EAX, 0, ESI						;de-allocate

 00000397  89 5F 04			MOV		(listNode	PTR	[EDI]).NextPtr,	EBX			;move the next address into (previous address).NextPtr
					
 0000039A  EB 0E			JMP QUIT
					;item not found
 0000039C			NOTFOUND:
					mWrite	"Node not found."							;write not found message to console
 000005B2		     1		.data		
 000005B2 4E 6F 64 65 20     1		??0005 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 0000039C		     1		.code
 0000039C  52		     1		push	edx
 0000039D  BA 000005B2 R     1		mov	edx,OFFSET ??0005
 000003A2  E8 00000000 E     1		call	WriteString
 000003A7  5A		     1		pop	edx
 000003A8  EB 00			JMP		QUIT
					;immediate quit
 000003AA			QUIT:
					RET
 000003B1			deleteNode		ENDP



				;---------------------------------------------------------------------------------------
 000003B1			editTarget		PROC		USES	EDX	EDI	ESI	EBX	ECX	EAX
				;
				;		This procedure will prompt for a list index number and search the list for the given 
				;	index.  If the index is found another prompt will be printed to the console asking for a 
				;	replacement string.  The given string will have new memory generated from the heap and 
				;	its address moved into the respective N.NodeData field of the STRUCT.
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 000003B7  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 000005C2		     1		.data		
 000005C2 54 68 65 20 6C     1		??0006 BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 000003C5		     1		.code
 000003C5  52		     1		push	edx
 000003C6  BA 000005C2 R     1		mov	edx,OFFSET ??0006
 000003CB  E8 00000000 E     1		call	WriteString
 000003D0  5A		     1		pop	edx
 000003D1  E9 000000B4			JMP		QUIT										;jump to quit
				.ENDIF	
					
 000003D6  BA 000002C6 R		MOV		EDX,	OFFSET strIndexInput				;move offset of strIndexInput into EDX
 000003DB  E8 00000000 E		CALL 	WriteString									;write the string of address EDX to the console
					INVOKE	getString, addr	strSelNum2, 4				;get string input
					INVOKE	ascint32, addr strSelNum2					;convert to 32 integer
 000003F6  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
 000003FB  BA 00000281 R		MOV		EDX,	OFFSET strInput						;move the string address into EDX
 00000400  E8 00000000 E		CALL	WriteString									;write prompt to console
					
 00000405  BA 00000000			MOV 	EDX,	0
					
 0000040A  BF 00000000 R		MOV 	EDI,	OFFSET pListHead					;EDI == N - 1
 0000040F  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;EBX == N + 1
 00000412  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
					
					;check for item
 00000415			CHECKL:	
					;item not found
				.IF			ECX == 0
					mWrite	"Node not found."							;write not found message to console		
 000005D5		     1		.data		
 000005D5 4E 6F 64 65 20     1		??0007 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 00000419		     1		.code
 00000419  52		     1		push	edx
 0000041A  BA 000005D5 R     1		mov	edx,OFFSET ??0007
 0000041F  E8 00000000 E     1		call	WriteString
 00000424  5A		     1		pop	edx
 00000425  EB 63			JMP		QUIT										;item is not found		;jump to QUIT

					;item is found
				.ELSEIF		ECX == EAX
 0000042D  EB 0F			JMP		FOUND										;item is found			;jump to FOUND
				.ELSE	
 00000431  42				INC		EDX
 00000432  8B FE			MOV		EDI,	ESI									;EDI == N				;next loops N - 1
 00000434  8B F3			MOV		ESI,	EBX									;ESI == N + 1			;next loops N
 00000436  8B 5E 04			MOV		EBX,	(ListNode	PTR	[ESI]).NextPtr		;EBX == N + 2			;next loops N + 1
 00000439  8B 4E 08			MOV		ECX,	(ListNode PTR [ESI]).dPosition		;ECX == N.dPosition
 0000043C  EB D7			JMP		CHECKL
				.ENDIF	
					
					;item found;;	Edit string
 0000043E			FOUND:	
 0000043E  56				PUSH	ESI
 0000043F  8B C6			MOV		EAX,	ESI
 00000441  8B 30			MOV		ESI,	(ListNode	PTR [EAX]).nodeData
 00000443  E8 FFFFFE53			CALL	getCount
 00000448  29 0D 00000561 R		SUB		dAllocatedBytes,	ECX

					;target item is last in the list
 0000044E  E8 FFFFFE11			CALL	getStringInput								;get the new string
 00000453  8B F3			MOV		ESI,	EBX
 00000455  E8 FFFFFE41			CALL	getCount
 0000045A  03 0D 00000561 R		ADD		ECX,	dAllocatedBytes
 00000460  89 0D 00000561 R		MOV		dAllocatedBytes,	ECX
 00000466  5E				POP		ESI
 00000467  89 1E			MOV		(ListNode	PTR	[ESI]).NodeData,	EBX		;move the new string address into nodeData
					
 00000469  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
					mWrite	"Edit successful!"							;write success message to the console 
 000005E5		     1		.data		
 000005E5 45 64 69 74 20     1		??0008 BYTE "Edit successful!",0	
	   73 75 63 63 65
	   73 73 66 75 6C
	   21 00
 0000046E		     1		.code
 0000046E  52		     1		push	edx
 0000046F  BA 000005E5 R     1		mov	edx,OFFSET ??0008
 00000474  E8 00000000 E     1		call	WriteString
 00000479  5A		     1		pop	edx
					
 0000047A  EB 0E			JMP QUIT
					;item not found
 0000047C			NOTFOUND:
					mWrite	"Node not found."							;write not found message to console
 000005F6		     1		.data		
 000005F6 4E 6F 64 65 20     1		??0009 BYTE "Node not found.",0	
	   6E 6F 74 20 66
	   6F 75 6E 64 2E
	   00
 0000047C		     1		.code
 0000047C  52		     1		push	edx
 0000047D  BA 000005F6 R     1		mov	edx,OFFSET ??0009
 00000482  E8 00000000 E     1		call	WriteString
 00000487  5A		     1		pop	edx
 00000488  EB 00			JMP		QUIT
					;immediate quit
 0000048A			QUIT:
					RET
 00000491			editTarget		ENDP



				;-------------------------------------------------------------------------------------------------
 00000491			pasteClipBoard		PROC
				;
				;		This procedure will copy any text data from the windows clipboard and dynamically allocate a
				;	buffer to store the text.  Another procedure will be called to parse the text and add it to the
				;	linked list.
				;
				;	Receives:	Nothing
				;	Returns:	Nothing
				;------------------------------------------------------------------------------------------------   
 00000606			.data
 00000606 00000000			hDynamicBuffer		DWORD 	0
 0000060A 00000000			hClipBoard			HANDLE 	0
 0000060E 00000000			dBuffSize			DWORD	0
					
 00000491			.code	
					INVOKE 	OpenClipboard,NULL										;open the clipboard process
					
				    INVOKE 	GetClipboardData, 1										;return a handle to the clipboards data
 0000049F  A3 0000060A R		MOV		hClipBoard,	EAX											;save the result into hClipBoard
					
					INVOKE 	GlobalSize, hClipBoard									;get the size of the data on the clipboard
 000004AF  40				INC		EAX														;increment by 1 to account for null
 000004B0  A3 0000060E R		MOV		dBuffSize,	EAX											;move the new size into dBuffSize									
 000004B5  01 05 00000561 R		ADD		dAllocatedBytes, EAX									;add EAX to the value labeled dAllocatedBytes
					
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, dBuffSize			;allocate memory for the dynamic buffer
 000004CE  A3 00000606 R		MOV		hDynamicBuffer,		EAX									;move the handle for the allocated memory into hDynamicBuffer
 000004D3  A1 0000060A R		MOV		EAX,	hClipBoard										;move hClipBoard (clipboard data handle) into EAX
					
					INVOKE 	GlobalLock, EAX											;lock the clipboard data in memory and return the address of its first byte
					INVOKE 	lstrcpy, hDynamicBuffer, EAX							;copy the string at address EAX into memory labeled hDynamicBuffer
					INVOKE	GlobalUnlock, hClipBoard								;unlock the data in memory
					
					INVOKE	CloseClipboard											;close the clipboard process

 000004FA  8B 35 00000606 R		MOV		ESI,	hDynamicBuffer									;move hDynamicBuffer value into ESI for parseBufferToNode
 00000500  E8 00000014			CALL	parseBufferToNode
					
					INVOKE	HeapFree, mHeap, 0, hDynamicBuffer						;de-allocate
					
 00000518  C3				RET
 00000519			pasteClipBoard		ENDP


				;-------------------------------------------------------------------------------------------------------------------
 00000519			parseBufferToNode			PROC	USES	EBX
				;	
				;		This procedure will receive a string in ESI and parse the string by ending each string with CRLF and a null.
				;	After a new string has been allocated and copied it will be passed to the procedure "appendStrToList" which will 
				;	add the newly allocated node to the end of the list and sets all of its data.
				;
				;	Receives:	Address of dynamic buffer in ESI
				;	Returns:	Nothing
				;-------------------------------------------------------------------------------------------------------------------
				.IF		dBuffSize == 0
					mWrite	"ClipBoard is Empty."
 00000612		     1		.data		
 00000612 43 6C 69 70 42     1		??000A BYTE "ClipBoard is Empty.",0	
	   6F 61 72 64 20
	   69 73 20 45 6D
	   70 74 79 2E 00
 00000523		     1		.code
 00000523  52		     1		push	edx
 00000524  BA 00000612 R     1		mov	edx,OFFSET ??000A
 00000529  E8 00000000 E     1		call	WriteString
 0000052E  5A		     1		pop	edx
 0000052F  EB 76			JMP		RETURN
				.ENDIF

 00000531			PARSE:
 00000531  B9 00000000			MOV		ECX,	0									;clear ECX
 00000536  56				PUSH 	ESI											;save the pasted buffer address
					;get count for string allocation
 00000537			COUNT:
 00000537  8A 1E			MOV		BL,		[ESI]								;move the nth element of [ESI] into BL
 00000539  80 FB 0A			CMP		BL,		0Ah									;compare nth element of ESI to BL
 0000053C  74 09			JE		ALLOC										;if equal jump to ALLOC
 0000053E  80 FB 00			CMP		BL,		0
 00000541  74 04			JE		ALLOC										;if equal jump to EOC
 00000543  41				INC		ECX											;increment ECX
 00000544  46				INC		ESI											;increment ESI
 00000545  EB F0			JMP		COUNT										;jump to COUNT
					
					;allocate memory for string
 00000547			ALLOC:	
 00000547  83 C1 02			ADD		ECX,	2									;add room to count for LF and null 

 0000054A  5E				POP		ESI											;restore ESI
 0000054B  51				PUSH	ECX											;save ECX
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, ECX		;allocate memory on the heap of size ECX
 0000055A  8B F8			MOV 	EDI,	EAX									;move the new address into EDI
 0000055C  8B DF			MOV		EBX,	EDI									;move EDI into EDX
					
 0000055E  59				POP		ECX											;restore ECX
 0000055F  FF 05 00000561 R		INC		dAllocatedBytes								;increment dAllocatedBytes
 00000565  FF 05 00000561 R		INC		dAllocatedBytes								;increment dAllocatedBytes
 0000056B  49				DEC		ECX											;decrement ECX

				.IF		ECX == 1
 00000571  FF 0D 00000561 R		DEC		dAllocatedBytes
 00000577  FF 0D 00000561 R		DEC		dAllocatedBytes
 0000057D  EB 28			JMP		RETURN
				.ENDIF	
					
					;copy string data
 0000057F			COPY:
 0000057F  8A 16			MOV		DL,		[ESI]								;move the nth element of [ESI] into BL
 00000581  88 17			MOV		[EDI],	DL									;move BL into the nth element into [EAX]
 00000583  46				INC		ESI											;go to nth + 1 element of ESI
 00000584  47				INC		EDI											;go to nth + 1 element of EAX
 00000585  FF 0D 0000060E R		DEC		dBuffSize									;decrement dBuffSize
 0000058B  E2 F2			LOOP	COPY										;LOOP to COPY until ECX = 0

					;allocate node
 0000058D			STRDONE:	
 0000058D  8B D0			MOV		EDX, 	EAX									;move the address into EDX for appendStrToList
 0000058F  E8 00000015			CALL 	appendStrToList								;call appendStrToList
				.IF		dBuffSize == 0			
 0000059D  EB 08			JMP		RETURN										;jump to return if dBuffSize == 0
				.ENDIF		
 0000059F  8A 5E 01			MOV		BL,		[ESI+1]								;move the next element of [ESI] into BL
 000005A2  80 FB 00			CMP		BL, 	0									;compare BL to 0
 000005A5  75 8A			JNE		PARSE										;jump to parse if they are not equal
					
 000005A7			RETURN:
					RET
 000005A9			parseBufferToNode			ENDP



				;---------------------------------------------------------------------------------------------------
 000005A9			appendStrToList			PROC		USES	ESI	EAX ECX	EDX
				;
				;	This procedure appends a node of address EAX into the linked list.
				;
				;	Receives:	New node address in EAX
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------------------
 000005AD  52				PUSH 	EDX
					
					INVOKE 	HeapAlloc, mHeap, HEAP_ZERO_MEMORY, 16		;allocate memory for a ListNode STRUCT
					
					;fail state
				.IF 		EAX == NULL
					mWrite "HeapAlloc failed"							;write fail message to console
 00000626		     1		.data		
 00000626 48 65 61 70 41     1		??000B BYTE "HeapAlloc failed",0	
	   6C 6C 6F 63 20
	   66 61 69 6C 65
	   64 00
 000005C1		     1		.code
 000005C1  52		     1		push	edx
 000005C2  BA 00000626 R     1		mov	edx,OFFSET ??000B
 000005C7  E8 00000000 E     1		call	WriteString
 000005CC  5A		     1		pop	edx
 000005CD  EB 45			jmp 	QUIT										;jump to quit
				.ENDIF
 000005CF  83 05 00000561 R		ADD		dAllocatedBytes,	16						;save the new value to memory
	   10
					
 000005D6  8B 35 00000004 R		MOV		ESI,	pLastAddr							;move the address in pLastAddr into ESI
 000005DC  8B 4E 08			MOV	 	ECX,	(ListNode PTR [ESI]).dPosition		;increment count
					
					;set pointer if list is null
				.IF ECX == 0			
 000005E3  A3 00000000 R		MOV	 	pListHead, EAX								;set list head to current address in EAX
					
					;set pointers if list has at least one element
				.ELSE
 000005EA  89 46 04			MOV		(ListNode PTR [ESI]).NextPtr, EAX			;set the last list items NextPtr equal to the address in EAX
					
				.ENDIF
 000005ED  8B 1D 0000001C R		MOV		EBX,	mHeap
 000005F3  89 58 0C			MOV		(ListNode PTR [EAX]).heapHandle, EBX		;move mHeap into heapHandle
 000005F6  C7 40 04			MOV		(ListNode PTR [EAX]).NextPtr, OFFSET lListTail;set next pointer to NULL
	   00000008 R
 000005FD  A3 00000004 R		MOV 	pLastAddr, 	EAX								;save the last address to memory
 00000602  5A				POP		EDX
 00000603  89 10			MOV		(ListNode PTR [EAX]).NodeData, EDX			;move the new string address into .NodeData
 00000605  FF 05 00000018 R		INC 	dCount										;move list count into ECX
 0000060B  8B 15 00000018 R		MOV 	EDX,	dCount								;move dCount into EDX
 00000611  89 50 08			MOV 	(ListNode PTR [EAX]).dPosition, EDX			;move count # into dPosition

 00000614			QUIT:
					RET
 00000619			appendStrToList			ENDP



				;---------------------------------------------------------------------------------------
 00000619			substringSearch		PROC		USES	EAX	EBX	ECX	EDX	ESI EDI
				;
				;		This procedure will search all the strings in the linked list for a match to the sub 
				;	string.  If a match is found the string will be printed to the console.
				;
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 0000061F  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
					
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty. "						;display console message
 00000637		     1		.data		
 00000637 54 68 65 20 6C     1		??000C BYTE "The list is empty. ",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 20 00
 0000062D		     1		.code
 0000062D  52		     1		push	edx
 0000062E  BA 00000637 R     1		mov	edx,OFFSET ??000C
 00000633  E8 00000000 E     1		call	WriteString
 00000638  5A		     1		pop	edx
 00000639  E9 0000009F			JMP		QUIT										;jump to QUIT
				.ELSE
 00000640  BA 00000323 R		MOV		EDX,	OFFSET strSubPrompt					;move offset address of strSubPrompt into EDX
 00000645  E8 00000000 E		CALL	WriteString									;write msg to the console
 0000064A  E8 FFFFFC15			CALL	getStringInput								;call getStringInput, dynamically allocate a string
 0000064F  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
				.ENDIF	

 00000654  8B C3			MOV		EAX, 	EBX									;move the address of the new string into EDI
 00000656  B9 00000000			MOV		ECX,	0									;clear ECX
					
 0000065B			START:
 0000065B  8B F8			MOV		EDI,	EAX									;restore to EDI
 0000065D  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move N.nodeData into EDX
 0000065F			SUBSRCH:
 0000065F  8A 1A			MOV		BL,		[EDX]								;move nth element of List string into BL
					
				.IF		BL == 0
					.IF	BYTE PTR [EDI] == 0	
 0000066A  EB 2E			JMP		MATCH										;match was found
					.ENDIF
 0000066C  EB 54			JMP		NEXT										;at the end of list string
				.ENDIF	

				.IF	BYTE PTR [EDI] == 13
 00000673  EB 25			JMP		MATCH
				.ENDIF
					
				.IF	BYTE PTR [EDI] == BL
 00000679  42				INC		EDX											;go to the next list string element
 0000067A  47				INC		EDI											;go to the next search string element
 0000067B  EB E2			JMP 	SUBSRCH										;jump subsrch
				.ENDIF
 0000067D  80 C3 20			ADD		BL,	20h
				.IF BYTE PTR [EDI] == BL
 00000684  42				INC		EDX											;go to the next list string element
 00000685  47				INC		EDI											;go to the next search string element
 00000686  EB D7			JMP 	SUBSRCH										;jump subsrch
				.ENDIF
 00000688  80 EB 40			SUB		BL, 40h
				.IF BYTE PTR [EDI] == BL 
 0000068F  42				INC		EDX											;go to the next list string element
 00000690  47				INC		EDI											;go to the next search string element
 00000691  EB CC			JMP 	SUBSRCH										;jump subsrch
				.ELSE
 00000695  8B F8			MOV		EDI,	EAX									;restore EDX
 00000697  42				INC		EDX											;go to the next list string element
				.ENDIF	
 00000698  EB C5			JMP 	SUBSRCH										;jump subsrch

 0000069A			MATCH:	
 0000069A  41				INC	ECX												;increment match counter
				.IF		ECX == 1
 000006A0  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
					mWrite	"Matches found: "							;display match msg
 0000064B		     1		.data		
 0000064B 4D 61 74 63 68     1		??000D BYTE "Matches found: ",0	
	   65 73 20 66 6F
	   75 6E 64 3A 20
	   00
 000006A5		     1		.code
 000006A5  52		     1		push	edx
 000006A6  BA 0000064B R     1		mov	edx,OFFSET ??000D
 000006AB  E8 00000000 E     1		call	WriteString
 000006B0  5A		     1		pop	edx
 000006B1  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
				.ENDIF
 000006B6  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move N.nodeData into EDX
 000006B8  E8 00000000 E		CALL	WriteString									;Write the string to the console
 000006BD  E8 00000000 E		CALL	Crlf										;go to the next line
 000006C2			NEXT:
 000006C2  8B 5E 04			MOV		EBX,	(ListNode PTR [ESI]).NextPtr		;move the next node address into EBX
 000006C5  8B F3			MOV		ESI,	EBX									;move the net address into ESI
 000006C7  81 FE 00000008 R		CMP		ESI,	OFFSET lListTail					;compare EBX to 0
 000006CD  74 02			JE		RETURN										;jump if equal
 000006CF  EB 8A			JMP START											;jump to start
					
 000006D1			RETURN:	
					mWrite 	"End of search."							;write ending search message to console
 0000065B		     1		.data		
 0000065B 45 6E 64 20 6F     1		??000E BYTE "End of search.",0	
	   66 20 73 65 61
	   72 63 68 2E 00
 000006D1		     1		.code
 000006D1  52		     1		push	edx
 000006D2  BA 0000065B R     1		mov	edx,OFFSET ??000E
 000006D7  E8 00000000 E     1		call	WriteString
 000006DC  5A		     1		pop	edx
 000006DD			QUIT:
				.IF		ECX == 0
					mWrite	"No matches were found."					;write no matches found msg to console
 0000066A		     1		.data		
 0000066A 4E 6F 20 6D 61     1		??000F BYTE "No matches were found.",0	
	   74 63 68 65 73
	   20 77 65 72 65
	   20 66 6F 75 6E
	   64 2E 00
 000006E1		     1		.code
 000006E1  52		     1		push	edx
 000006E2  BA 0000066A R     1		mov	edx,OFFSET ??000F
 000006E7  E8 00000000 E     1		call	WriteString
 000006EC  5A		     1		pop	edx
				.ENDIF
 000006ED  E8 00000000 E		CALL	Crlf										;call Crlf, go to the next line
					
					RET
 000006F9			substringSearch		ENDP



				;---------------------------------------------------------------------------------------
 000006F9			saveListToFile		PROC		USES	ESI	EAX	EBX	ECX	EDX	
				;
				;		This procedure saves every string in the list into an output file named 'Save.txt'.
				;	After all items have been saved a message will output how many bytes were saved into 
				;	the file.  This procedure completely overwrites the current Save.txt and all of its
				;	contents.
				;
				;	Receives:	Nothing
				;	Returns:	Nothing
				;---------------------------------------------------------------------------------------
 000006FE  8B 35 00000000 R		MOV		ESI,	pListHead							;ESI == N
					
				.IF		ESI == OFFSET lListTail
					mWrite "The list is empty."							;display console message
 00000681		     1		.data		
 00000681 54 68 65 20 6C     1		??0010 BYTE "The list is empty.",0	
	   69 73 74 20 69
	   73 20 65 6D 70
	   74 79 2E 00
 0000070C		     1		.code
 0000070C  52		     1		push	edx
 0000070D  BA 00000681 R     1		mov	edx,OFFSET ??0010
 00000712  E8 00000000 E     1		call	WriteString
 00000717  5A		     1		pop	edx
 00000718  E9 000000A6			JMP		QUIT										;jump to QUIT
				.ENDIF	

					INVOKE 	CreateFile,	ADDR strSaveFile, GENERIC_WRITE, DO_NOT_SHARE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0

				.IF		EAX == INVALID_HANDLE_VALUE
					mWrite "Error occured while opening file."			;write the error msg to the console
 00000694		     1		.data		
 00000694 45 72 72 6F 72     1		??0011 BYTE "Error occured while opening file.",0	
	   20 6F 63 63 75
	   72 65 64 20 77
	   68 69 6C 65 20
	   6F 70 65 6E 69
	   6E 67 20 66 69
	   6C 65 2E 00
 0000073E		     1		.code
 0000073E  52		     1		push	edx
 0000073F  BA 00000694 R     1		mov	edx,OFFSET ??0011
 00000744  E8 00000000 E     1		call	WriteString
 00000749  5A		     1		pop	edx
 0000074A  EB 77			JMP		QUIT
				.ELSE
					mWrite "Opened file 'Save.txt'."					;write the success msg to the console
 000006B6		     1		.data		
 000006B6 4F 70 65 6E 65     1		??0012 BYTE "Opened file 'Save.txt'.",0	
	   64 20 66 69 6C
	   65 20 27 53 61
	   76 65 2E 74 78
	   74 27 2E 00
 0000074E		     1		.code
 0000074E  52		     1		push	edx
 0000074F  BA 000006B6 R     1		mov	edx,OFFSET ??0012
 00000754  E8 00000000 E     1		call	WriteString
 00000759  5A		     1		pop	edx
 0000075A  E8 00000000 E		CALL 	Crlf										;call Crlf, go to the next line
 0000075F  A3 00000031 R		MOV		hFileHandle,	EAX							;move the file handle to memory
				.ENDIF

 00000764  B8 00000000			MOV		EAX,	0									;clear EAX
 00000769  A3 00000039 R		MOV		dBytesWritten, EAX							;clear dBytesWritten
 0000076E  6A 00			PUSH	0											;push 0 for the loop
 00000770			WRITE:
 00000770  83 7E 08 00			CMP		DWORD PTR (ListNode PTR [ESI]).dPosition, 0	;compare N.dPosition to 0
 00000774  74 2E			JE		RETURN										;jump to RETURN if equal
 00000776  8B 16			MOV		EDX,	(ListNode PTR [ESI]).nodeData		;move the node data into EDX
 00000778  56				PUSH	ESI											;push ESI onto the stack
 00000779  8B F2			MOV		ESI,	EDX									;move EDX into ESI for getCount
 0000077B  E8 FFFFFB1B			CALL	getCount									;call getCount, result is in ECX
					
 00000780  5E				POP		ESI											;restore ESI
					
					;EDX = pointer to string, ECX = # of bytes to write to file, EAX = number of bytes written after execution
					INVOKE 	WriteFile, hFileHandle, EDX, ECX, addr dBytesWritten, 0 
					
 00000795  8B 5E 04			MOV		EBX, 	(ListNode PTR [ESI]).NextPtr		;move the next address into EBX
 00000798  8B F3			MOV		ESI,	EBX									;move the next address into ESI ; ESI = n
 0000079A  5B				POP		EBX											;restore EBX   
 0000079B  03 1D 00000039 R		ADD		EBX,	dBytesWritten						;add bytes written to EBX
 000007A1  53				PUSH	EBX											;push EBX
 000007A2  EB CC			JMP		WRITE										;jump to WRITE

 000007A4			RETURN:
					;close the file referenced by the handle hFileHandle
					INVOKE 	CloseHandle, hFileHandle					
					
 000007AF  5B				POP		EBX											;restore EBX
 000007B0  8B C3			MOV		EAX, 	EBX									;move EBX into EAX for WriteDec
 000007B2  E8 00000000 E		CALL	WriteDec									;call WriteDec, display EAXs value to the console
					mWrite	" bytes were written to the file."			;display the written bytes msg to the console
 000006CE		     1		.data		
 000006CE 20 62 79 74 65     1		??0013 BYTE " bytes were written to the file.",0	
	   73 20 77 65 72
	   65 20 77 72 69
	   74 74 65 6E 20
	   74 6F 20 74 68
	   65 20 66 69 6C
	   65 2E 00
 000007B7		     1		.code
 000007B7  52		     1		push	edx
 000007B8  BA 000006CE R     1		mov	edx,OFFSET ??0013
 000007BD  E8 00000000 E     1		call	WriteString
 000007C2  5A		     1		pop	edx
					
 000007C3			QUIT:	
					RET
 000007C9			saveListToFile		ENDP



				;---------------------------------------------------------------------------------------

				end main												;end of main

































Microsoft (R) Macro Assembler Version 14.00.23506.0	    05/10/18 17:36:12
masm4.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
ListNode . . . . . . . . . . . .	 00000010
  NodeData . . . . . . . . . . .	 00000000	 DWord
  NextPtr  . . . . . . . . . . .	 00000004	 DWord
  dPosition  . . . . . . . . . .	 00000008	 DWord
  heapHandle . . . . . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000006EF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007C9 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseClipboard . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetClipboardData . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GlobalLock . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GlobalSize . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GlobalUnlock . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenClipboard  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
appendStrToList  . . . . . . . .	P Near	 000005A9 _TEXT	Length= 00000070 Public STDCALL
  QUIT . . . . . . . . . . . . .	L Near	 00000614 _TEXT	
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
createOne  . . . . . . . . . . .	P Near	 000001CC _TEXT	Length= 00000098 Public STDCALL
  START  . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000025F _TEXT	
deleteNode . . . . . . . . . . .	P Near	 000002D4 _TEXT	Length= 000000DD Public STDCALL
  CHECKL . . . . . . . . . . . .	L Near	 0000032E _TEXT	
  FOUND  . . . . . . . . . . . .	L Near	 00000357 _TEXT	
  NOTFOUND . . . . . . . . . . .	L Near	 0000039C _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000003AA _TEXT	
displayMenu  . . . . . . . . . .	P Near	 0000004A _TEXT	Length= 0000003B Public STDCALL
  MENU . . . . . . . . . . . . .	L Near	 0000004B _TEXT	
dumpList . . . . . . . . . . . .	P Near	 00000172 _TEXT	Length= 0000005A Public STDCALL
  WLOOP  . . . . . . . . . . . .	L Near	 0000018E _TEXT	
  EMPTY  . . . . . . . . . . . .	L Near	 000001BD _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000001C7 _TEXT	
editTarget . . . . . . . . . . .	P Near	 000003B1 _TEXT	Length= 000000E0 Public STDCALL
  CHECKL . . . . . . . . . . . .	L Near	 00000415 _TEXT	
  FOUND  . . . . . . . . . . . .	L Near	 0000043E _TEXT	
  NOTFOUND . . . . . . . . . . .	L Near	 0000047C _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000048A _TEXT	
getCount . . . . . . . . . . . .	P Near	 0000029B _TEXT	Length= 00000014 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002A2 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000002AC _TEXT	
getSelection . . . . . . . . . .	P Near	 000000B3 _TEXT	Length= 000000BF Public STDCALL
  RETURN . . . . . . . . . . . .	L Near	 00000164 _TEXT	
getStringInput . . . . . . . . .	P Near	 00000264 _TEXT	Length= 00000037 Public STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
lstrcpy  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004A Public STDCALL
  MENU . . . . . . . . . . . . .	L Near	 00000023 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 0000002F _TEXT	
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
parseBufferToNode  . . . . . . .	P Near	 00000519 _TEXT	Length= 00000090 Public STDCALL
  PARSE  . . . . . . . . . . . .	L Near	 00000531 _TEXT	
  COUNT  . . . . . . . . . . . .	L Near	 00000537 _TEXT	
  ALLOC  . . . . . . . . . . . .	L Near	 00000547 _TEXT	
  COPY . . . . . . . . . . . . .	L Near	 0000057F _TEXT	
  STRDONE  . . . . . . . . . . .	L Near	 0000058D _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000005A7 _TEXT	
pasteClipBoard . . . . . . . . .	P Near	 00000491 _TEXT	Length= 00000088 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
saveListToFile . . . . . . . . .	P Near	 000006F9 _TEXT	Length= 000000D0 Public STDCALL
  WRITE  . . . . . . . . . . . .	L Near	 00000770 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000007A4 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000007C3 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
stringCopy . . . . . . . . . . .	P Near	 000002AF _TEXT	Length= 00000025 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002B6 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000002C3 _TEXT	
substringSearch  . . . . . . . .	P Near	 00000619 _TEXT	Length= 000000E0 Public STDCALL
  START  . . . . . . . . . . . .	L Near	 0000065B _TEXT	
  SUBSRCH  . . . . . . . . . . .	L Near	 0000065F _TEXT	
  MATCH  . . . . . . . . . . . .	L Near	 0000069A _TEXT	
  NEXT . . . . . . . . . . . . .	L Near	 000006C2 _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000006D1 _TEXT	
  QUIT . . . . . . . . . . . . .	L Near	 000006DD _TEXT	
validateSelection  . . . . . . .	P Near	 00000085 _TEXT	Length= 0000002E Public STDCALL
  FALSE1 . . . . . . . . . . . .	L Near	 000000AE _TEXT	
  RETURN . . . . . . . . . . . .	L Near	 000000B0 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000569 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000056B _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000057C _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000058F _DATA	
??0004 . . . . . . . . . . . . .	Byte	 0000059F _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000005B2 _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000005C2 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000005D5 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000005E5 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000005F6 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00000612 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000626 _DATA	
??000C . . . . . . . . . . . . .	Byte	 00000637 _DATA	
??000D . . . . . . . . . . . . .	Byte	 0000064B _DATA	
??000E . . . . . . . . . . . . .	Byte	 0000065B _DATA	
??000F . . . . . . . . . . . . .	Byte	 0000066A _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00000681 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 00000694 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 000006B6 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 000006CE _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFF_SIZE  . . . . . . . . . . .	Number	 00000200h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_MAX . . . . . . . . . . . .	Number	 17D78400h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_START . . . . . . . . . . .	Number	 001E8480h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dAllocatedBytes  . . . . . . . .	DWord	 00000561 _DATA	
dBuffSize  . . . . . . . . . . .	DWord	 0000060E _DATA	
dBytesWritten  . . . . . . . . .	DWord	 00000039 _DATA	
dCount . . . . . . . . . . . . .	DWord	 00000018 _DATA	
dInt . . . . . . . . . . . . . .	DWord	 00000565 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hClipBoard . . . . . . . . . . .	DWord	 0000060A _DATA	
hDynamicBuffer . . . . . . . . .	DWord	 00000606 _DATA	
hFileHandle  . . . . . . . . . .	DWord	 00000031 _DATA	
hSTDHandle . . . . . . . . . . .	DWord	 00000035 _DATA	
lListTail  . . . . . . . . . . .	ListNode  00000008 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
mHeap  . . . . . . . . . . . . .	DWord	 0000001C _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
pLastAddr  . . . . . . . . . . .	DWord	 00000004 _DATA	
pListHead  . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
strAddr  . . . . . . . . . . . .	Byte	 00000269 _DATA	
strBuffer  . . . . . . . . . . .	Byte	 0000034F _DATA	
strEmptyList . . . . . . . . . .	Byte	 000002B2 _DATA	
strIndexInput  . . . . . . . . .	Byte	 000002C6 _DATA	
strInputFile . . . . . . . . . .	Byte	 00000020 _DATA	
strInput . . . . . . . . . . . .	Byte	 00000281 _DATA	
strListSF  . . . . . . . . . . .	Byte	 00000223 _DATA	
strMenu0 . . . . . . . . . . . .	Byte	 0000003D _DATA	
strMenu1 . . . . . . . . . . . .	Byte	 0000007D _DATA	
strMenu2a  . . . . . . . . . . .	Byte	 000000A2 _DATA	
strMenu2b  . . . . . . . . . . .	Byte	 000000B5 _DATA	
strMenu2c  . . . . . . . . . . .	Byte	 000000E1 _DATA	
strMenu2 . . . . . . . . . . . .	Byte	 00000093 _DATA	
strMenu3 . . . . . . . . . . . .	Byte	 000000FA _DATA	
strMenu4 . . . . . . . . . . . .	Byte	 00000149 _DATA	
strMenu5 . . . . . . . . . . . .	Byte	 000001AF _DATA	
strMenu6 . . . . . . . . . . . .	Byte	 0000020A _DATA	
strMenu7 . . . . . . . . . . . .	Byte	 00000219 _DATA	
strMenuBytes . . . . . . . . . .	Byte	 00000076 _DATA	
strMenuMem . . . . . . . . . . .	Byte	 00000051 _DATA	
strNodeData  . . . . . . . . . .	Byte	 00000251 _DATA	
strNodeNum . . . . . . . . . . .	Byte	 00000239 _DATA	
strSaveFile  . . . . . . . . . .	Byte	 00000029 _DATA	
strSavePrompt  . . . . . . . . .	Byte	 000002EE _DATA	
strSelNum1 . . . . . . . . . . .	Byte	 00000557 _DATA	
strSelNum2 . . . . . . . . . . .	Byte	 0000055C _DATA	
strSelNum  . . . . . . . . . . .	Byte	 00000552 _DATA	
strSelection . . . . . . . . . .	Byte	 0000054F _DATA	
strSubPrompt . . . . . . . . . .	Byte	 00000323 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
